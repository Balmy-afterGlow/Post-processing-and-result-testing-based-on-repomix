{
  "basic": [
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/CacheControl.java (java)\n\n## Code Content:\n```java\npackage com.squareup.okhttp;\n\nimport com.squareup.okhttp.internal.http.HeaderParser;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * A Cache-Control header with cache directives from a server or client. These\n * directives set policy on what responses can be stored, and which requests can\n * be satisfied by those stored responses.\n *\n * <p>See <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">RFC\n * 2616, 14.9</a>.\n */\npublic final class CacheControl {\n  /**\n   * Cache control request directives that require network validation of\n   * responses. Note that such requests may be assisted by the cache via\n   * conditional GET requests.\n   */\n  public static final CacheControl FORCE_NETWORK = new Builder().noCache().build();\n\n  /**\n   * Cache control request directives that uses the cache only, even if the\n   * cached response is stale. If the response isn't available in the cache or\n   * requires server validation, the call will fail with a {@code 504\n   * Unsatisfiable Request}.\n   */\n  public static final CacheControl FORCE_CACHE = new Builder()\n      .onlyIfCached()\n      .maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS)\n      .build();\n\n  private final boolean noCache;\n  private final boolean noStore;\n  private final int maxAgeSeconds;\n  private final int sMaxAgeSeconds;\n  private final boolean isPublic;\n  private final boolean mustRevalidate;\n  private final int maxStaleSeconds;\n  private final int minFreshSeconds;\n  private final boolean onlyIfCached;\n  private final boolean noTransform;",
      "metadata": {
        "language": "java",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/CacheControl.java",
        "total_chunks": 8,
        "strategy": "basic",
        "chunk_index": 0
      },
      "similarity_score": 0.8209636211395264
    },
    {
      "content": "private CacheStrategy(Request networkRequest, Response cacheResponse) {\n    this.networkRequest = networkRequest;\n    this.cacheResponse = cacheResponse;\n  }\n\n  /**\n   * Returns true if {@code response} can be stored to later serve another\n   * request.\n   */\n  public static boolean isCacheable(Response response, Request request) {\n    // Always go to network for uncacheable response codes (RFC 2616, 13.4),\n    // This implementation doesn't support caching partial content.\n    int responseCode = response.code();\n    if (responseCode != HTTP_OK\n        && responseCode != HTTP_NOT_AUTHORITATIVE\n        && responseCode != HTTP_MULT_CHOICE\n        && responseCode != HTTP_MOVED_PERM\n        && responseCode != HTTP_GONE\n        && responseCode != HTTP_PERM_REDIRECT) {\n      return false;\n    }\n\n    // A 'no-store' directive on request or response prevents the response from being cached.\n    CacheControl responseCaching = response.cacheControl();\n    CacheControl requestCaching = request.cacheControl();\n    if (responseCaching.noStore() || requestCaching.noStore()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public static class Factory {\n    final long nowMillis;\n    final Request request;\n    final Response cacheResponse;\n\n    /** The server's time when the cached response was served, if known. */\n    private Date servedDate;\n    private String servedDateString;\n\n    /** The last modified date of the cached response, if known. */\n    private Date lastModified;\n    private String lastModifiedString;\n\n    /**\n     * The expiration date of the cached response, if known. If both this field\n     * and the max age are set, the max age is preferred.\n     */\n    private Date expires;\n\n    /**\n     * Extension header set by OkHttp specifying the timestamp when the cached\n     * HTTP request was first initiated.\n     */\n    private long sentRequestMillis;",
      "metadata": {
        "strategy": "basic",
        "total_chunks": 7,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java",
        "chunk_index": 1,
        "language": "java"
      },
      "similarity_score": 0.8388346433639526
    },
    {
      "content": "assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n    assertEquals(connection1.getCipherSuite(), connection2.getCipherSuite());\n  }\n\n  /**\n   * We've had bugs where caching and cross-protocol redirects yield class\n   * cast exceptions internal to the cache because we incorrectly assumed that\n   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;\n   * in practice redirects mean that each can do either.\n   *\n   * https://github.com/square/okhttp/issues/214\n   */\n  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {\n    server2.useHttps(sslContext.getSocketFactory(), false);\n    server2.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));\n    server2.enqueue(new MockResponse().setBody(\"DEF\"));\n\n    server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Location: \" + server2.getUrl(\"/\")));\n\n    client.client().setSslSocketFactory(sslContext.getSocketFactory());\n    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);\n\n    HttpURLConnection connection1 = client.open(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection1));\n\n    // Cached!\n    HttpURLConnection connection2 = client.open(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection2));\n\n    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithContentLengthHeader() throws IOException {\n    testServerPrematureDisconnect(TransferKind.FIXED_LENGTH);\n  }",
      "metadata": {
        "chunk_index": 9,
        "strategy": "basic",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java",
        "total_chunks": 47,
        "language": "java"
      },
      "similarity_score": 0.8603465557098389
    },
    {
      "content": "HttpURLConnection connection = client.open(server.getUrl(\"/\"));\n    assertEquals(\"A\", connection.getHeaderField(\"\"));\n  }\n\n  /**\n   * Old implementations of OkHttp's response cache wrote header fields like\n   * \":status: 200 OK\". This broke our cached response parser because it split\n   * on the first colon. This regression test exists to help us read these old\n   * bad cache entries.\n   *\n   * https://github.com/square/okhttp/issues/227\n   */\n  @Test public void testGoldenCacheResponse() throws Exception {\n    cache.close();\n    server.enqueue(new MockResponse()\n        .clearHeaders()\n        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));",
      "metadata": {
        "strategy": "basic",
        "language": "java",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java",
        "chunk_index": 40,
        "total_chunks": 47
      },
      "similarity_score": 0.8814165592193604
    },
    {
      "content": "// The HTTP spec says that if the network's response is older than our\n    // cached response, we may return the cache's response. Like Chrome (but\n    // unlike Firefox), this client prefers to return the newer response.\n    Date lastModified = cached.headers().getDate(\"Last-Modified\");\n    if (lastModified != null) {\n      Date networkLastModified = network.headers().getDate(\"Last-Modified\");\n      if (networkLastModified != null\n          && networkLastModified.getTime() < lastModified.getTime()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Combines cached headers with a network headers as defined by RFC 2616,\n   * 13.5.3.\n   */\n  private static Headers combine(Headers cachedHeaders, Headers networkHeaders) throws IOException {\n    Headers.Builder result = new Headers.Builder();\n\n    for (int i = 0, size = cachedHeaders.size(); i < size; i++) {\n      String fieldName = cachedHeaders.name(i);\n      String value = cachedHeaders.value(i);\n      if (\"Warning\".equalsIgnoreCase(fieldName) && value.startsWith(\"1\")) {\n        continue; // Drop 100-level freshness warnings.\n      }\n      if (!OkHeaders.isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {\n        result.add(fieldName, value);\n      }\n    }\n\n    for (int i = 0, size = networkHeaders.size(); i < size; i++) {\n      String fieldName = networkHeaders.name(i);\n      if (\"Content-Length\".equalsIgnoreCase(fieldName)) {\n        continue; // Ignore content-length headers of validating responses.\n      }\n      if (OkHeaders.isEndToEnd(fieldName)) {\n        result.add(fieldName, networkHeaders.value(i));\n      }\n    }\n\n    return result.build();\n  }\n\n  public void receiveHeaders(Headers headers) throws IOException {\n    CookieHandler cookieHandler = client.getCookieHandler();\n    if (cookieHandler != null) {\n      cookieHandler.put(userRequest.uri(), OkHeaders.toMultimap(headers, null));\n    }\n  }",
      "metadata": {
        "language": "java",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "chunk_index": 19,
        "total_chunks": 22,
        "strategy": "basic"
      },
      "similarity_score": 0.8817503452301025
    },
    {
      "content": "/**\n   * The user-visible response. This is derived from either the network\n   * response, cache response, or both. It is customized to support OkHttp\n   * features like compression and caching.\n   */\n  private Response userResponse;\n\n  private Sink requestBodyOut;\n  private BufferedSink bufferedRequestBody;\n  private final boolean callerWritesRequestBody;\n  private final boolean forWebSocket;\n\n  /** The cache request currently being populated from a network response. */\n  private CacheRequest storeRequest;\n  private CacheStrategy cacheStrategy;\n\n  /**\n   * @param request the HTTP request without a body. The body must be written via the engine's\n   *     request body stream.\n   * @param callerWritesRequestBody true for the {@code HttpURLConnection}-style interaction\n   *     model where control flow is returned to the calling application to write the request body\n   *     before the response body is readable.\n   * @param connection the connection used for an intermediate response immediately prior to this\n   *     request/response pair, such as a same-host redirect. This engine assumes ownership of the\n   *     connection and must release it when it is unneeded.\n   * @param routeSelector the route selector used for a failed attempt immediately preceding this\n   */\n  public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBody,\n      boolean callerWritesRequestBody, boolean forWebSocket, Connection connection,\n      RouteSelector routeSelector, RetryableSink requestBodyOut, Response priorResponse) {\n    this.client = client;\n    this.userRequest = request;\n    this.bufferRequestBody = bufferRequestBody;\n    this.callerWritesRequestBody = callerWritesRequestBody;\n    this.forWebSocket = forWebSocket;\n    this.connection = connection;\n    this.routeSelector = routeSelector;\n    this.requestBodyOut = requestBodyOut;\n    this.priorResponse = priorResponse;",
      "metadata": {
        "strategy": "basic",
        "total_chunks": 22,
        "chunk_index": 4,
        "language": "java",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java"
      },
      "similarity_score": 0.8841299414634705
    },
    {
      "content": "networkResponse = readNetworkResponse();\n    }\n\n    receiveHeaders(networkResponse.headers());\n\n    // If we have a cache response too, then we're doing a conditional get.\n    if (cacheResponse != null) {\n      if (validate(cacheResponse, networkResponse)) {\n        userResponse = cacheResponse.newBuilder()\n            .request(userRequest)\n            .priorResponse(stripBody(priorResponse))\n            .headers(combine(cacheResponse.headers(), networkResponse.headers()))\n            .cacheResponse(stripBody(cacheResponse))\n            .networkResponse(stripBody(networkResponse))\n            .build();\n        networkResponse.body().close();\n        releaseConnection();\n\n        // Update the cache after combining headers but before stripping the\n        // Content-Encoding header (as performed by initContentStream()).\n        InternalCache responseCache = Internal.instance.internalCache(client);\n        responseCache.trackConditionalCacheHit();\n        responseCache.update(cacheResponse, stripBody(userResponse));\n        userResponse = unzip(userResponse);\n        return;\n      } else {\n        closeQuietly(cacheResponse.body());\n      }\n    }\n\n    userResponse = networkResponse.newBuilder()\n        .request(userRequest)\n        .priorResponse(stripBody(priorResponse))\n        .cacheResponse(stripBody(cacheResponse))\n        .networkResponse(stripBody(networkResponse))\n        .build();\n\n    if (hasBody(userResponse)) {\n      maybeCache();\n      userResponse = unzip(cacheWritingResponse(storeRequest, userResponse));\n    }\n  }\n\n  class NetworkInterceptorChain implements Interceptor.Chain {\n    private final int index;\n    private final Request request;\n    private int calls;\n\n    NetworkInterceptorChain(int index, Request request) {\n      this.index = index;\n      this.request = request;\n    }\n\n    @Override public Connection connection() {\n      return connection;\n    }\n\n    @Override public Request request() {\n      return request;\n    }",
      "metadata": {
        "language": "java",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "total_chunks": 22,
        "strategy": "basic",
        "chunk_index": 15
      },
      "similarity_score": 0.886197566986084
    },
    {
      "content": "Response response = entry.response(request, snapshot);\n\n    if (!entry.matches(request, response)) {\n      Util.closeQuietly(response.body());\n      return null;\n    }\n\n    return response;\n  }\n\n  private CacheRequest put(Response response) throws IOException {\n    String requestMethod = response.request().method();\n\n    if (HttpMethod.invalidatesCache(response.request().method())) {\n      try {\n        remove(response.request());\n      } catch (IOException ignored) {\n        // The cache cannot be written.\n      }\n      return null;\n    }\n    if (!requestMethod.equals(\"GET\")) {\n      // Don't cache non-GET responses. We're technically allowed to cache\n      // HEAD requests and some POST requests, but the complexity of doing\n      // so is high and the benefit is low.\n      return null;\n    }\n\n    if (OkHeaders.hasVaryAll(response)) {\n      return null;\n    }\n\n    Entry entry = new Entry(response);\n    DiskLruCache.Editor editor = null;\n    try {\n      editor = cache.edit(urlToKey(response.request()));\n      if (editor == null) {\n        return null;\n      }\n      entry.writeTo(editor);\n      return new CacheRequestImpl(editor);\n    } catch (IOException e) {\n      abortQuietly(editor);\n      return null;\n    }\n  }\n\n  private void remove(Request request) throws IOException {\n    cache.remove(urlToKey(request));\n  }\n\n  private void update(Response cached, Response network) {\n    Entry entry = new Entry(network);\n    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;\n    DiskLruCache.Editor editor = null;\n    try {\n      editor = snapshot.edit(); // Returns null if snapshot is not current.\n      if (editor != null) {\n        entry.writeTo(editor);\n        editor.commit();\n      }\n    } catch (IOException e) {\n      abortQuietly(editor);\n    }\n  }",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Cache.java",
        "strategy": "basic",
        "total_chunks": 16,
        "chunk_index": 4,
        "language": "java"
      },
      "similarity_score": 0.88656085729599
    },
    {
      "content": "/**\n   * We've had bugs where caching and cross-protocol redirects yield class\n   * cast exceptions internal to the cache because we incorrectly assumed that\n   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;\n   * in practice redirects mean that each can do either.\n   *\n   * https://github.com/square/okhttp/issues/214\n   */\n  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {\n    server2.useHttps(sslContext.getSocketFactory(), false);\n    server2.enqueue(new MockResponse()\n        .addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));\n    server2.enqueue(new MockResponse()\n        .setBody(\"DEF\"));\n\n    server.enqueue(new MockResponse()\n        .addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Location: \" + server2.getUrl(\"/\")));\n\n    client.setSslSocketFactory(sslContext.getSocketFactory());\n    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);\n\n    Response response1 = get(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", response1.body().string());\n\n    // Cached!\n    Response response2 = get(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", response2.body().string());\n\n    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithContentLengthHeader() throws IOException {\n    testServerPrematureDisconnect(TransferKind.FIXED_LENGTH);\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithChunkedEncoding() throws IOException {\n    testServerPrematureDisconnect(TransferKind.CHUNKED);\n  }",
      "metadata": {
        "total_chunks": 50,
        "chunk_index": 9,
        "language": "java",
        "strategy": "basic",
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java"
      },
      "similarity_score": 0.8898624777793884
    },
    {
      "content": "/**\n * Caches HTTP and HTTPS responses to the filesystem so they may be reused,\n * saving time and bandwidth.\n *\n * <h3>Cache Optimization</h3>\n * To measure cache effectiveness, this class tracks three statistics:\n * <ul>\n *     <li><strong>{@linkplain #getRequestCount() Request Count:}</strong> the\n *         number of HTTP requests issued since this cache was created.\n *     <li><strong>{@linkplain #getNetworkCount() Network Count:}</strong> the\n *         number of those requests that required network use.\n *     <li><strong>{@linkplain #getHitCount() Hit Count:}</strong> the number of\n *         those requests whose responses were served by the cache.\n * </ul>\n * Sometimes a request will result in a conditional cache hit. If the cache\n * contains a stale copy of the response, the client will issue a conditional\n * {@code GET}. The server will then send either the updated response if it has\n * changed, or a short 'not modified' response if the client's copy is still\n * valid. Such responses increment both the network count and hit count.\n *\n * <p>The best way to improve the cache hit rate is by configuring the web\n * server to return cacheable responses. Although this client honors all <a\n * href=\"http://www.ietf.org/rfc/rfc2616.txt\">HTTP/1.1 (RFC 2068)</a> cache\n * headers, it doesn't cache partial responses.\n *\n * <h3>Force a Network Response</h3>\n * In some situations, such as after a user clicks a 'refresh' button, it may be\n * necessary to skip the cache, and fetch data directly from the server. To force\n * a full refresh, add the {@code no-cache} directive: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n * }</pre>\n * If it is only necessary to force a cached response to be validated by the\n * server, use the more efficient {@code max-age=0} instead: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n * }</pre>\n *\n * <h3>Force a Cache Response</h3>",
      "metadata": {
        "chunk_index": 1,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Cache.java",
        "total_chunks": 16,
        "strategy": "basic",
        "language": "java"
      },
      "similarity_score": 0.8947926759719849
    },
    {
      "content": "/**\n     * Returns a strategy to satisfy {@code request} using the a cached response\n     * {@code response}.\n     */\n    public CacheStrategy get() {\n      CacheStrategy candidate = getCandidate();\n\n      if (candidate.networkRequest != null && request.cacheControl().onlyIfCached()) {\n        // We're forbidden from using the network and the cache is insufficient.\n        return new CacheStrategy(null, null);\n      }\n\n      return candidate;\n    }\n\n    /** Returns a strategy to use assuming the request can use the network. */\n    private CacheStrategy getCandidate() {\n      // No cached response.\n      if (cacheResponse == null) {\n        return new CacheStrategy(request, null);\n      }\n\n      // Drop the cached response if it's missing a required handshake.\n      if (request.isHttps() && cacheResponse.handshake() == null) {\n        return new CacheStrategy(request, null);\n      }\n\n      // If this response shouldn't have been stored, it should never be used\n      // as a response source. This check should be redundant as long as the\n      // persistence store is well-behaved and the rules are constant.\n      if (!isCacheable(cacheResponse, request)) {\n        return new CacheStrategy(request, null);\n      }\n\n      CacheControl requestCaching = request.cacheControl();\n      if (requestCaching.noCache() || hasConditions(request)) {\n        return new CacheStrategy(request, null);\n      }\n\n      long ageMillis = cacheResponseAge();\n      long freshMillis = computeFreshnessLifetime();\n\n      if (requestCaching.maxAgeSeconds() != -1) {\n        freshMillis = Math.min(freshMillis, SECONDS.toMillis(requestCaching.maxAgeSeconds()));\n      }\n\n      long minFreshMillis = 0;\n      if (requestCaching.minFreshSeconds() != -1) {\n        minFreshMillis = SECONDS.toMillis(requestCaching.minFreshSeconds());\n      }",
      "metadata": {
        "total_chunks": 7,
        "language": "java",
        "strategy": "basic",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java",
        "chunk_index": 3
      },
      "similarity_score": 0.9025353789329529
    },
    {
      "content": "Response response = get(server.getUrl(\"/\"));\n    assertEquals(\"A\", response.header(\"\"));\n  }\n\n  /**\n   * Old implementations of OkHttp's response cache wrote header fields like\n   * \":status: 200 OK\". This broke our cached response parser because it split\n   * on the first colon. This regression test exists to help us read these old\n   * bad cache entries.\n   *\n   * https://github.com/square/okhttp/issues/227\n   */\n  @Test public void testGoldenCacheResponse() throws Exception {\n    cache.close();\n    server.enqueue(new MockResponse()\n        .clearHeaders()\n        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));",
      "metadata": {
        "total_chunks": 50,
        "language": "java",
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java",
        "chunk_index": 41,
        "strategy": "basic"
      },
      "similarity_score": 0.9156109690666199
    },
    {
      "content": "@Test public void responseCachingAndInputStreamSkipWithNoLengthHeaders() throws IOException {\n    testResponseCaching(TransferKind.END_OF_STREAM);\n  }\n\n  /**\n   * HttpURLConnection.getInputStream().skip(long) causes ResponseCache corruption\n   * http://code.google.com/p/android/issues/detail?id=8175\n   */\n  private void testResponseCaching(TransferKind transferKind) throws IOException {\n    MockResponse response =\n        new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n            .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n            .setStatus(\"HTTP/1.1 200 Fantastic\");\n    transferKind.setBody(response, \"I love puppies but hate spiders\", 1);\n    server.enqueue(response);\n\n    // Make sure that calling skip() doesn't omit bytes from the cache.\n    HttpURLConnection urlConnection = openConnection(server.getUrl(\"/\"));\n    InputStream in = urlConnection.getInputStream();\n    assertEquals(\"I love \", readAscii(urlConnection, \"I love \".length()));\n    reliableSkip(in, \"puppies but hate \".length());\n    assertEquals(\"spiders\", readAscii(urlConnection, \"spiders\".length()));\n    assertEquals(-1, in.read());\n    in.close();\n\n    urlConnection = openConnection(server.getUrl(\"/\")); // cached!\n    in = urlConnection.getInputStream();\n    assertEquals(\"I love puppies but hate spiders\",\n        readAscii(urlConnection, \"I love puppies but hate spiders\".length()));\n    assertEquals(200, urlConnection.getResponseCode());\n    assertEquals(\"Fantastic\", urlConnection.getResponseMessage());\n\n    assertEquals(-1, in.read());\n    in.close();\n  }\n\n  @Test public void secureResponseCaching() throws IOException {\n    server.useHttps(sslContext.getSocketFactory(), false);\n    server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));",
      "metadata": {
        "chunk_index": 3,
        "strategy": "basic",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java",
        "total_chunks": 41,
        "language": "java"
      },
      "similarity_score": 0.9232076406478882
    },
    {
      "content": "ResponseCache getResponseCache() {\n    InternalCache cache = client.internalCache();\n    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;\n  }\n\n  /**\n   * Returns a copy of this stream handler factory that includes a shallow copy\n   * of the internal {@linkplain OkHttpClient HTTP client}.\n   */\n  @Override public OkUrlFactory clone() {\n    return new OkUrlFactory(client.clone());\n  }\n\n  public HttpURLConnection open(URL url) {\n    return open(url, client.getProxy());\n  }\n\n  HttpURLConnection open(URL url, Proxy proxy) {\n    String protocol = url.getProtocol();\n    OkHttpClient copy = client.copyWithDefaults();\n    copy.setProxy(proxy);\n\n    if (protocol.equals(\"http\")) return new HttpURLConnectionImpl(url, copy);\n    if (protocol.equals(\"https\")) return new HttpsURLConnectionImpl(url, copy);\n    throw new IllegalArgumentException(\"Unexpected protocol: \" + protocol);\n  }\n\n  /**\n   * Creates a URLStreamHandler as a {@link java.net.URL#setURLStreamHandlerFactory}.\n   *\n   * <p>This code configures OkHttp to handle all HTTP and HTTPS connections\n   * created with {@link java.net.URL#openConnection()}: <pre>   {@code\n   *\n   *   OkHttpClient okHttpClient = new OkHttpClient();\n   *   URL.setURLStreamHandlerFactory(new OkUrlFactory(okHttpClient));\n   * }</pre>\n   */\n  @Override public URLStreamHandler createURLStreamHandler(final String protocol) {\n    if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) return null;\n\n    return new URLStreamHandler() {\n      @Override protected URLConnection openConnection(URL url) {\n        return open(url);\n      }\n\n      @Override protected URLConnection openConnection(URL url, Proxy proxy) {\n        return open(url, proxy);\n      }\n\n      @Override protected int getDefaultPort() {\n        if (protocol.equals(\"http\")) return 80;\n        if (protocol.equals(\"https\")) return 443;\n        throw new AssertionError();\n      }\n    };\n  }\n}\n```",
      "metadata": {
        "file_path": "okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java",
        "strategy": "basic",
        "language": "java",
        "chunk_index": 1,
        "total_chunks": 2
      },
      "similarity_score": 0.9246644973754883
    },
    {
      "content": "client = new OkHttpClient();\n    client.setCache(cache);\n  }\n\n  public void run() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      System.out.println(\"    Request: \" + i);\n\n      Request request = new Request.Builder()\n          .url(\"https://api.github.com/search/repositories?q=http\")\n          .build();\n\n      if (i == 2) {\n        // Force this request's response to be written to the cache. This way, subsequent responses\n        // can be read from the cache.\n        System.out.println(\"Force cache: true\");\n        client.networkInterceptors().add(REWRITE_CACHE_CONTROL_INTERCEPTOR);\n      } else {\n        System.out.println(\"Force cache: false\");\n        client.networkInterceptors().clear();\n      }\n\n      Response response = client.newCall(request).execute();\n      response.body().close();\n      if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n      System.out.println(\"    Network: \" + (response.networkResponse() != null));\n      System.out.println();\n    }\n  }\n\n  public static void main(String... args) throws Exception {\n    new RewriteResponseCacheControl(new File(\"RewriteResponseCacheControl.tmp\")).run();\n  }\n}\n```",
      "metadata": {
        "file_path": "samples/guide/src/main/java/com/squareup/okhttp/recipes/RewriteResponseCacheControl.java",
        "chunk_index": 1,
        "strategy": "basic",
        "language": "java",
        "total_chunks": 2
      },
      "similarity_score": 0.9258514642715454
    },
    {
      "content": "/**\n   * An {@link java.net.HttpURLConnection} that represents an HTTP request at the point where\n   * the request has been made, and the response headers have been received, but the body content,\n   * if present, has not been read yet. This intended to provide enough information for\n   * {@link java.net.ResponseCache} subclasses and no more.\n   *\n   * <p>Much of the method implementations are overrides to delegate to the OkHttp request and\n   * response, or to deny access to information as a real HttpURLConnection would after connection.\n   */\n  private static final class CacheHttpURLConnection extends HttpURLConnection {\n\n    private final Request request;\n    private final Response response;\n\n    public CacheHttpURLConnection(Response response) {\n      super(response.request().url());\n      this.request = response.request();\n      this.response = response;\n\n      // Configure URLConnection inherited fields.\n      this.connected = true;\n      this.doOutput = response.body() == null;\n\n      // Configure HttpUrlConnection inherited fields.\n      this.method = request.method();\n    }\n\n    // HTTP connection lifecycle methods\n\n    @Override\n    public void connect() throws IOException {\n      throw throwRequestModificationException();\n    }\n\n    @Override\n    public void disconnect() {\n      throw throwRequestModificationException();\n    }\n\n    // HTTP Request methods\n\n    @Override\n    public void setRequestProperty(String key, String value) {\n      throw throwRequestModificationException();\n    }\n\n    @Override\n    public void addRequestProperty(String key, String value) {\n      throw throwRequestModificationException();\n    }\n\n    @Override\n    public String getRequestProperty(String key) {\n      return request.header(key);\n    }",
      "metadata": {
        "strategy": "basic",
        "total_chunks": 14,
        "language": "java",
        "file_path": "okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java",
        "chunk_index": 8
      },
      "similarity_score": 0.9416099786758423
    },
    {
      "content": "private static final ResponseBody EMPTY_BODY = new ResponseBody() {\n    @Override public MediaType contentType() {\n      return null;\n    }\n    @Override public long contentLength() {\n      return 0;\n    }\n    @Override public BufferedSource source() {\n      return new Buffer();\n    }\n  };\n\n  final OkHttpClient client;\n\n  private Connection connection;\n  private RouteSelector routeSelector;\n  private Route route;\n  private final Response priorResponse;\n\n  private Transport transport;\n\n  /** The time when the request headers were written, or -1 if they haven't been written yet. */\n  long sentRequestMillis = -1;\n\n  /**\n   * True if this client added an \"Accept-Encoding: gzip\" header field and is\n   * therefore responsible for also decompressing the transfer stream.\n   */\n  private boolean transparentGzip;\n\n  /**\n   * True if the request body must be completely buffered before transmission;\n   * false if it can be streamed. Buffering has two advantages: we don't need\n   * the content-length in advance and we can retransmit if necessary. The\n   * upside of streaming is that we can save memory.\n   */\n  public final boolean bufferRequestBody;\n\n  /**\n   * The original application-provided request. Never modified by OkHttp. When\n   * follow-up requests are necessary, they are derived from this request.\n   */\n  private final Request userRequest;\n\n  /**\n   * The request to send on the network, or null for no network request. This is\n   * derived from the user request, and customized to support OkHttp features\n   * like compression and caching.\n   */\n  private Request networkRequest;\n\n  /**\n   * The cached response, or null if the cache doesn't exist or cannot be used\n   * for this request. Conditional caching means this may be non-null even when\n   * the network request is non-null. Never modified by OkHttp.\n   */\n  private Response cacheResponse;",
      "metadata": {
        "strategy": "basic",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "language": "java",
        "chunk_index": 3,
        "total_chunks": 22
      },
      "similarity_score": 0.9419716596603394
    },
    {
      "content": "if (cacheResponse != null) {\n        // We have a valid cached response. Promote it to the user response immediately.\n        this.userResponse = cacheResponse.newBuilder()\n            .request(userRequest)\n            .priorResponse(stripBody(priorResponse))\n            .cacheResponse(stripBody(cacheResponse))\n            .build();\n      } else {\n        // We're forbidden from using the network, and the cache is insufficient.\n        this.userResponse = new Response.Builder()\n            .request(userRequest)\n            .priorResponse(stripBody(priorResponse))\n            .protocol(Protocol.HTTP_1_1)\n            .code(504)\n            .message(\"Unsatisfiable Request (only-if-cached)\")\n            .body(EMPTY_BODY)\n            .build();\n      }\n\n      userResponse = unzip(userResponse);\n    }\n  }\n\n  private static Response stripBody(Response response) {\n    return response != null && response.body() != null\n        ? response.newBuilder().body(null).build()\n        : response;\n  }\n\n  /** Connect to the origin server either directly or via a proxy. */\n  private void connect(Request request) throws IOException {\n    if (connection != null) throw new IllegalStateException();\n\n    if (routeSelector == null) {\n      routeSelector = RouteSelector.get(request, client);\n    }\n\n    connection = routeSelector.next(this);\n    route = connection.getRoute();\n  }\n\n  /**\n   * Called immediately before the transport transmits HTTP request headers.\n   * This is used to observe the sent time should the request be cached.\n   */\n  public void writingRequestHeaders() {\n    if (sentRequestMillis != -1) throw new IllegalStateException();\n    sentRequestMillis = System.currentTimeMillis();\n  }\n\n  boolean permitsRequestBody() {\n    return HttpMethod.permitsRequestBody(userRequest.method());\n  }",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "total_chunks": 22,
        "strategy": "basic",
        "chunk_index": 7,
        "language": "java"
      },
      "similarity_score": 0.9432773590087891
    },
    {
      "content": "assertEquals(connection1.getCipherSuite(), connection2.getCipherSuite());\n  }\n\n  /**\n   * We've had bugs where caching and cross-protocol redirects yield class\n   * cast exceptions internal to the cache because we incorrectly assumed that\n   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;\n   * in practice redirects mean that each can do either.\n   *\n   * https://github.com/square/okhttp/issues/214\n   */\n  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {\n    server2.useHttps(sslContext.getSocketFactory(), false);\n    server2.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));\n    server2.enqueue(new MockResponse().setBody(\"DEF\"));\n\n    server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Location: \" + server2.getUrl(\"/\")));\n\n    client.setSslSocketFactory(sslContext.getSocketFactory());\n    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);\n\n    HttpURLConnection connection1 = openConnection(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection1));\n\n    // Cached!\n    HttpURLConnection connection2 = openConnection(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection2));\n  }\n\n  @Test public void responseCacheRequestHeaders() throws IOException, URISyntaxException {\n    server.enqueue(new MockResponse().setBody(\"ABC\"));",
      "metadata": {
        "chunk_index": 7,
        "language": "java",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java",
        "total_chunks": 41,
        "strategy": "basic"
      },
      "similarity_score": 0.9474467039108276
    },
    {
      "content": "* server, use the more efficient {@code max-age=0} instead: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n * }</pre>\n *\n * <h3>Force a Cache Response</h3>\n * Sometimes you'll want to show resources if they are available immediately,\n * but not otherwise. This can be used so your application can show\n * <i>something</i> while waiting for the latest data to be downloaded. To\n * restrict a request to locally-cached resources, add the {@code\n * only-if-cached} directive: <pre>   {@code\n *     try {\n *         connection.addRequestProperty(\"Cache-Control\", \"only-if-cached\");\n *         InputStream cached = connection.getInputStream();\n *         // the resource was cached! show it\n *     } catch (FileNotFoundException e) {\n *         // the resource was not cached\n *     }\n * }</pre>\n * This technique works even better in situations where a stale response is\n * better than no response. To permit stale cached responses, use the {@code\n * max-stale} directive with the maximum staleness in seconds: <pre>   {@code\n *         int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks stale\n *         connection.addRequestProperty(\"Cache-Control\", \"max-stale=\" + maxStale);\n * }</pre>\n */\npublic final class Cache {\n  // TODO: add APIs to iterate the cache?\n  private static final int VERSION = 201105;\n  private static final int ENTRY_METADATA = 0;\n  private static final int ENTRY_BODY = 1;\n  private static final int ENTRY_COUNT = 2;",
      "metadata": {
        "chunk_index": 2,
        "strategy": "basic",
        "language": "java",
        "total_chunks": 16,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Cache.java"
      },
      "similarity_score": 0.9492550492286682
    }
  ],
  "enhanced": [
    {
      "content": "### Commit 2\n- ID: 112f020c\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-11-01 23:53:05\n- Message: Change the cache to have non-shared semantics.\n\nThis means we'll cache responses that use an 'Authorization' header. This\nmeans OkHttp's cache shouldn't be used on middleboxes that sit between\nuser agents and the origin server; in practice this is never a use case\nfor OkHttp.\n\nFixes https://github.com/square/okhttp/issues/1035\n- Changes:\n```diff\n@@ -50,17 +50,8 @@ public final class CacheStrategy {\n       return false;\n     }\n \n-    // Responses to authorized requests aren't cacheable unless they include\n-    // a 'public', 'must-revalidate' or 's-maxage' directive.\n-    CacheControl responseCaching = response.cacheControl();\n-    if (request.header(\"Authorization\") != null\n-        && !responseCaching.isPublic()\n-        && !responseCaching.mustRevalidate()\n-        && responseCaching.sMaxAgeSeconds() == -1) {\n-      return false;\n-   ...\n```\n\n### Commit 3\n- ID: ddac0083\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-11-01 23:05:56\n- Message: Fix request cache-control to match spec.\n\nFixes https://github.com/square/okhttp/issues/1081\n- Changes:\n```diff\n@@ -60,7 +60,9 @@ public final class CacheStrategy {\n       return false;\n     }\n \n-    if (responseCaching.noStore()) {\n+    // A 'no-store' directive on request or response prevents the response from being cached.\n+    CacheControl requestCaching = request.cacheControl();\n+    if (responseCaching.noStore() || requestCaching.noStore()) {\n       return false;\n     }\n \n@@ -124,7 +126,7 @@ public final class CacheStrategy {\n           } else if (\"ETag\".equalsIgnoreCase(fieldName)) {\n             e...\n```",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java",
        "strategy": "enhanced",
        "chunk_index": 7,
        "total_chunks": 9,
        "language": "java",
        "commit_count": 5
      },
      "similarity_score": 0.8113225698471069
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/CacheControl.java (java)\n\n## Code Content:\n```java\npackage com.squareup.okhttp;\n\nimport com.squareup.okhttp.internal.http.HeaderParser;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * A Cache-Control header with cache directives from a server or client. These\n * directives set policy on what responses can be stored, and which requests can\n * be satisfied by those stored responses.\n *\n * <p>See <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">RFC\n * 2616, 14.9</a>.\n */\npublic final class CacheControl {\n  /**\n   * Cache control request directives that require network validation of\n   * responses. Note that such requests may be assisted by the cache via\n   * conditional GET requests.\n   */\n  public static final CacheControl FORCE_NETWORK = new Builder().noCache().build();\n\n  /**\n   * Cache control request directives that uses the cache only, even if the\n   * cached response is stale. If the response isn't available in the cache or\n   * requires server validation, the call will fail with a {@code 504\n   * Unsatisfiable Request}.\n   */\n  public static final CacheControl FORCE_CACHE = new Builder()\n      .onlyIfCached()\n      .maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS)\n      .build();\n\n  private final boolean noCache;\n  private final boolean noStore;\n  private final int maxAgeSeconds;\n  private final int sMaxAgeSeconds;\n  private final boolean isPublic;\n  private final boolean mustRevalidate;\n  private final int maxStaleSeconds;\n  private final int minFreshSeconds;\n  private final boolean onlyIfCached;\n  private final boolean noTransform;",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/CacheControl.java",
        "total_chunks": 10,
        "strategy": "enhanced",
        "commit_count": 4,
        "language": "java",
        "chunk_index": 0
      },
      "similarity_score": 0.8209636211395264
    },
    {
      "content": "private CacheStrategy(Request networkRequest, Response cacheResponse) {\n    this.networkRequest = networkRequest;\n    this.cacheResponse = cacheResponse;\n  }\n\n  /**\n   * Returns true if {@code response} can be stored to later serve another\n   * request.\n   */\n  public static boolean isCacheable(Response response, Request request) {\n    // Always go to network for uncacheable response codes (RFC 2616, 13.4),\n    // This implementation doesn't support caching partial content.\n    int responseCode = response.code();\n    if (responseCode != HTTP_OK\n        && responseCode != HTTP_NOT_AUTHORITATIVE\n        && responseCode != HTTP_MULT_CHOICE\n        && responseCode != HTTP_MOVED_PERM\n        && responseCode != HTTP_GONE\n        && responseCode != HTTP_PERM_REDIRECT) {\n      return false;\n    }\n\n    // A 'no-store' directive on request or response prevents the response from being cached.\n    CacheControl responseCaching = response.cacheControl();\n    CacheControl requestCaching = request.cacheControl();\n    if (responseCaching.noStore() || requestCaching.noStore()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public static class Factory {\n    final long nowMillis;\n    final Request request;\n    final Response cacheResponse;\n\n    /** The server's time when the cached response was served, if known. */\n    private Date servedDate;\n    private String servedDateString;\n\n    /** The last modified date of the cached response, if known. */\n    private Date lastModified;\n    private String lastModifiedString;\n\n    /**\n     * The expiration date of the cached response, if known. If both this field\n     * and the max age are set, the max age is preferred.\n     */\n    private Date expires;\n\n    /**\n     * Extension header set by OkHttp specifying the timestamp when the cached\n     * HTTP request was first initiated.\n     */\n    private long sentRequestMillis;",
      "metadata": {
        "strategy": "enhanced",
        "total_chunks": 9,
        "language": "java",
        "commit_count": 5,
        "chunk_index": 1,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java"
      },
      "similarity_score": 0.8388346433639526
    },
    {
      "content": "assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n    assertEquals(connection1.getCipherSuite(), connection2.getCipherSuite());\n  }\n\n  /**\n   * We've had bugs where caching and cross-protocol redirects yield class\n   * cast exceptions internal to the cache because we incorrectly assumed that\n   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;\n   * in practice redirects mean that each can do either.\n   *\n   * https://github.com/square/okhttp/issues/214\n   */\n  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {\n    server2.useHttps(sslContext.getSocketFactory(), false);\n    server2.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));\n    server2.enqueue(new MockResponse().setBody(\"DEF\"));\n\n    server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Location: \" + server2.getUrl(\"/\")));\n\n    client.client().setSslSocketFactory(sslContext.getSocketFactory());\n    client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);\n\n    HttpURLConnection connection1 = client.open(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection1));\n\n    // Cached!\n    HttpURLConnection connection2 = client.open(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", readAscii(connection2));\n\n    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithContentLengthHeader() throws IOException {\n    testServerPrematureDisconnect(TransferKind.FIXED_LENGTH);\n  }",
      "metadata": {
        "chunk_index": 9,
        "commit_count": 4,
        "total_chunks": 49,
        "strategy": "enhanced",
        "language": "java",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java"
      },
      "similarity_score": 0.8603465557098389
    },
    {
      "content": "HttpURLConnection connection = client.open(server.getUrl(\"/\"));\n    assertEquals(\"A\", connection.getHeaderField(\"\"));\n  }\n\n  /**\n   * Old implementations of OkHttp's response cache wrote header fields like\n   * \":status: 200 OK\". This broke our cached response parser because it split\n   * on the first colon. This regression test exists to help us read these old\n   * bad cache entries.\n   *\n   * https://github.com/square/okhttp/issues/227\n   */\n  @Test public void testGoldenCacheResponse() throws Exception {\n    cache.close();\n    server.enqueue(new MockResponse()\n        .clearHeaders()\n        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));",
      "metadata": {
        "commit_count": 4,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java",
        "total_chunks": 49,
        "strategy": "enhanced",
        "chunk_index": 40,
        "language": "java"
      },
      "similarity_score": 0.8814165592193604
    },
    {
      "content": "// The HTTP spec says that if the network's response is older than our\n    // cached response, we may return the cache's response. Like Chrome (but\n    // unlike Firefox), this client prefers to return the newer response.\n    Date lastModified = cached.headers().getDate(\"Last-Modified\");\n    if (lastModified != null) {\n      Date networkLastModified = network.headers().getDate(\"Last-Modified\");\n      if (networkLastModified != null\n          && networkLastModified.getTime() < lastModified.getTime()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Combines cached headers with a network headers as defined by RFC 2616,\n   * 13.5.3.\n   */\n  private static Headers combine(Headers cachedHeaders, Headers networkHeaders) throws IOException {\n    Headers.Builder result = new Headers.Builder();\n\n    for (int i = 0, size = cachedHeaders.size(); i < size; i++) {\n      String fieldName = cachedHeaders.name(i);\n      String value = cachedHeaders.value(i);\n      if (\"Warning\".equalsIgnoreCase(fieldName) && value.startsWith(\"1\")) {\n        continue; // Drop 100-level freshness warnings.\n      }\n      if (!OkHeaders.isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {\n        result.add(fieldName, value);\n      }\n    }\n\n    for (int i = 0, size = networkHeaders.size(); i < size; i++) {\n      String fieldName = networkHeaders.name(i);\n      if (\"Content-Length\".equalsIgnoreCase(fieldName)) {\n        continue; // Ignore content-length headers of validating responses.\n      }\n      if (OkHeaders.isEndToEnd(fieldName)) {\n        result.add(fieldName, networkHeaders.value(i));\n      }\n    }\n\n    return result.build();\n  }\n\n  public void receiveHeaders(Headers headers) throws IOException {\n    CookieHandler cookieHandler = client.getCookieHandler();\n    if (cookieHandler != null) {\n      cookieHandler.put(userRequest.uri(), OkHeaders.toMultimap(headers, null));\n    }\n  }",
      "metadata": {
        "strategy": "enhanced",
        "chunk_index": 19,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "language": "java",
        "total_chunks": 25,
        "commit_count": 5
      },
      "similarity_score": 0.8817503452301025
    },
    {
      "content": "/**\n   * The user-visible response. This is derived from either the network\n   * response, cache response, or both. It is customized to support OkHttp\n   * features like compression and caching.\n   */\n  private Response userResponse;\n\n  private Sink requestBodyOut;\n  private BufferedSink bufferedRequestBody;\n  private final boolean callerWritesRequestBody;\n  private final boolean forWebSocket;\n\n  /** The cache request currently being populated from a network response. */\n  private CacheRequest storeRequest;\n  private CacheStrategy cacheStrategy;\n\n  /**\n   * @param request the HTTP request without a body. The body must be written via the engine's\n   *     request body stream.\n   * @param callerWritesRequestBody true for the {@code HttpURLConnection}-style interaction\n   *     model where control flow is returned to the calling application to write the request body\n   *     before the response body is readable.\n   * @param connection the connection used for an intermediate response immediately prior to this\n   *     request/response pair, such as a same-host redirect. This engine assumes ownership of the\n   *     connection and must release it when it is unneeded.\n   * @param routeSelector the route selector used for a failed attempt immediately preceding this\n   */\n  public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBody,\n      boolean callerWritesRequestBody, boolean forWebSocket, Connection connection,\n      RouteSelector routeSelector, RetryableSink requestBodyOut, Response priorResponse) {\n    this.client = client;\n    this.userRequest = request;\n    this.bufferRequestBody = bufferRequestBody;\n    this.callerWritesRequestBody = callerWritesRequestBody;\n    this.forWebSocket = forWebSocket;\n    this.connection = connection;\n    this.routeSelector = routeSelector;\n    this.requestBodyOut = requestBodyOut;\n    this.priorResponse = priorResponse;",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "chunk_index": 4,
        "total_chunks": 25,
        "commit_count": 5,
        "language": "java",
        "strategy": "enhanced"
      },
      "similarity_score": 0.8841299414634705
    },
    {
      "content": "### Commit 3\n- ID: f80b1f3a\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-10-25 23:42:10\n- Message: Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from our buffer to the cached file\non disk. Unfortunately we were copying N bytes from the front of the buffer\nwhen we wanted N bytes from the back of the buffer.\n\nTypically these are the same, but certain access patterns can cause them\nto be different, corrpting the cached file on disk.\n\nThis was uncovered by migrating the cache tests from operating on\nHttpURLConnection's API to our new API.\n- Changes:\n```diff\n@@ -0,0 +1,792 @@\n+/*\n+ * Copyright (C) 2014 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eithe...\n```",
      "metadata": {
        "commit_count": 3,
        "strategy": "enhanced",
        "total_chunks": 23,
        "language": "java",
        "chunk_index": 22,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java"
      },
      "similarity_score": 0.885165810585022
    },
    {
      "content": "networkResponse = readNetworkResponse();\n    }\n\n    receiveHeaders(networkResponse.headers());\n\n    // If we have a cache response too, then we're doing a conditional get.\n    if (cacheResponse != null) {\n      if (validate(cacheResponse, networkResponse)) {\n        userResponse = cacheResponse.newBuilder()\n            .request(userRequest)\n            .priorResponse(stripBody(priorResponse))\n            .headers(combine(cacheResponse.headers(), networkResponse.headers()))\n            .cacheResponse(stripBody(cacheResponse))\n            .networkResponse(stripBody(networkResponse))\n            .build();\n        networkResponse.body().close();\n        releaseConnection();\n\n        // Update the cache after combining headers but before stripping the\n        // Content-Encoding header (as performed by initContentStream()).\n        InternalCache responseCache = Internal.instance.internalCache(client);\n        responseCache.trackConditionalCacheHit();\n        responseCache.update(cacheResponse, stripBody(userResponse));\n        userResponse = unzip(userResponse);\n        return;\n      } else {\n        closeQuietly(cacheResponse.body());\n      }\n    }\n\n    userResponse = networkResponse.newBuilder()\n        .request(userRequest)\n        .priorResponse(stripBody(priorResponse))\n        .cacheResponse(stripBody(cacheResponse))\n        .networkResponse(stripBody(networkResponse))\n        .build();\n\n    if (hasBody(userResponse)) {\n      maybeCache();\n      userResponse = unzip(cacheWritingResponse(storeRequest, userResponse));\n    }\n  }\n\n  class NetworkInterceptorChain implements Interceptor.Chain {\n    private final int index;\n    private final Request request;\n    private int calls;\n\n    NetworkInterceptorChain(int index, Request request) {\n      this.index = index;\n      this.request = request;\n    }\n\n    @Override public Connection connection() {\n      return connection;\n    }\n\n    @Override public Request request() {\n      return request;\n    }",
      "metadata": {
        "language": "java",
        "total_chunks": 25,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java",
        "commit_count": 5,
        "chunk_index": 15,
        "strategy": "enhanced"
      },
      "similarity_score": 0.886197566986084
    },
    {
      "content": "Response response = entry.response(request, snapshot);\n\n    if (!entry.matches(request, response)) {\n      Util.closeQuietly(response.body());\n      return null;\n    }\n\n    return response;\n  }\n\n  private CacheRequest put(Response response) throws IOException {\n    String requestMethod = response.request().method();\n\n    if (HttpMethod.invalidatesCache(response.request().method())) {\n      try {\n        remove(response.request());\n      } catch (IOException ignored) {\n        // The cache cannot be written.\n      }\n      return null;\n    }\n    if (!requestMethod.equals(\"GET\")) {\n      // Don't cache non-GET responses. We're technically allowed to cache\n      // HEAD requests and some POST requests, but the complexity of doing\n      // so is high and the benefit is low.\n      return null;\n    }\n\n    if (OkHeaders.hasVaryAll(response)) {\n      return null;\n    }\n\n    Entry entry = new Entry(response);\n    DiskLruCache.Editor editor = null;\n    try {\n      editor = cache.edit(urlToKey(response.request()));\n      if (editor == null) {\n        return null;\n      }\n      entry.writeTo(editor);\n      return new CacheRequestImpl(editor);\n    } catch (IOException e) {\n      abortQuietly(editor);\n      return null;\n    }\n  }\n\n  private void remove(Request request) throws IOException {\n    cache.remove(urlToKey(request));\n  }\n\n  private void update(Response cached, Response network) {\n    Entry entry = new Entry(network);\n    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;\n    DiskLruCache.Editor editor = null;\n    try {\n      editor = snapshot.edit(); // Returns null if snapshot is not current.\n      if (editor != null) {\n        entry.writeTo(editor);\n        editor.commit();\n      }\n    } catch (IOException e) {\n      abortQuietly(editor);\n    }\n  }",
      "metadata": {
        "commit_count": 5,
        "total_chunks": 18,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Cache.java",
        "strategy": "enhanced",
        "language": "java",
        "chunk_index": 4
      },
      "similarity_score": 0.88656085729599
    },
    {
      "content": "/**\n   * We've had bugs where caching and cross-protocol redirects yield class\n   * cast exceptions internal to the cache because we incorrectly assumed that\n   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;\n   * in practice redirects mean that each can do either.\n   *\n   * https://github.com/square/okhttp/issues/214\n   */\n  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {\n    server2.useHttps(sslContext.getSocketFactory(), false);\n    server2.enqueue(new MockResponse()\n        .addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));\n    server2.enqueue(new MockResponse()\n        .setBody(\"DEF\"));\n\n    server.enqueue(new MockResponse()\n        .addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)\n        .addHeader(\"Location: \" + server2.getUrl(\"/\")));\n\n    client.setSslSocketFactory(sslContext.getSocketFactory());\n    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);\n\n    Response response1 = get(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", response1.body().string());\n\n    // Cached!\n    Response response2 = get(server.getUrl(\"/\"));\n    assertEquals(\"ABC\", response2.body().string());\n\n    assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4\n    assertEquals(2, cache.getHitCount());\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithContentLengthHeader() throws IOException {\n    testServerPrematureDisconnect(TransferKind.FIXED_LENGTH);\n  }\n\n  @Test public void serverDisconnectsPrematurelyWithChunkedEncoding() throws IOException {\n    testServerPrematureDisconnect(TransferKind.CHUNKED);\n  }",
      "metadata": {
        "language": "java",
        "strategy": "enhanced",
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java",
        "total_chunks": 52,
        "commit_count": 5,
        "chunk_index": 9
      },
      "similarity_score": 0.8898624777793884
    },
    {
      "content": "try {\n      HttpURLConnection connection = new OkUrlFactory(client).open(url);\n      connection.getResponseCode();\n    } catch (Exception expected) {\n      if (expected.getCause() instanceof URISyntaxException) {\n        expected.printStackTrace();\n      }\n    }\n\n    return uriReference.get();\n  }\n}\n```\n\n## Git Commit History\n\n### Commit 1\n- ID: f80b1f3a\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-10-25 23:42:10\n- Message: Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from our buffer to the cached file\non disk. Unfortunately we were copying N bytes from the front of the buffer\nwhen we wanted N bytes from the back of the buffer.\n\nTypically these are the same, but certain access patterns can cause them\nto be different, corrpting the cached file on disk.\n\nThis was uncovered by migrating the cache tests from operating on\nHttpURLConnection's API to our new API.\n- Changes:\n```diff\n@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (C) 2009 The Android Open Source Project\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS...\n```",
      "metadata": {
        "commit_count": 1,
        "strategy": "enhanced",
        "language": "java",
        "chunk_index": 4,
        "total_chunks": 5,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java"
      },
      "similarity_score": 0.8914310932159424
    },
    {
      "content": "### Commit 4\n- ID: f80b1f3a\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-10-25 23:42:10\n- Message: Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from our buffer to the cached file\non disk. Unfortunately we were copying N bytes from the front of the buffer\nwhen we wanted N bytes from the back of the buffer.\n\nTypically these are the same, but certain access patterns can cause them\nto be different, corrpting the cached file on disk.\n\nThis was uncovered by migrating the cache tests from operating on\nHttpURLConnection's API to our new API.\n- Changes:\n```diff\n@@ -0,0 +1,1717 @@\n+/*\n+ * Copyright (C) 2014 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eith...\n```",
      "metadata": {
        "strategy": "enhanced",
        "chunk_index": 42,
        "total_chunks": 43,
        "language": "java",
        "commit_count": 4,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java"
      },
      "similarity_score": 0.8931058645248413
    },
    {
      "content": "/**\n * Caches HTTP and HTTPS responses to the filesystem so they may be reused,\n * saving time and bandwidth.\n *\n * <h3>Cache Optimization</h3>\n * To measure cache effectiveness, this class tracks three statistics:\n * <ul>\n *     <li><strong>{@linkplain #getRequestCount() Request Count:}</strong> the\n *         number of HTTP requests issued since this cache was created.\n *     <li><strong>{@linkplain #getNetworkCount() Network Count:}</strong> the\n *         number of those requests that required network use.\n *     <li><strong>{@linkplain #getHitCount() Hit Count:}</strong> the number of\n *         those requests whose responses were served by the cache.\n * </ul>\n * Sometimes a request will result in a conditional cache hit. If the cache\n * contains a stale copy of the response, the client will issue a conditional\n * {@code GET}. The server will then send either the updated response if it has\n * changed, or a short 'not modified' response if the client's copy is still\n * valid. Such responses increment both the network count and hit count.\n *\n * <p>The best way to improve the cache hit rate is by configuring the web\n * server to return cacheable responses. Although this client honors all <a\n * href=\"http://www.ietf.org/rfc/rfc2616.txt\">HTTP/1.1 (RFC 2068)</a> cache\n * headers, it doesn't cache partial responses.\n *\n * <h3>Force a Network Response</h3>\n * In some situations, such as after a user clicks a 'refresh' button, it may be\n * necessary to skip the cache, and fetch data directly from the server. To force\n * a full refresh, add the {@code no-cache} directive: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n * }</pre>\n * If it is only necessary to force a cached response to be validated by the\n * server, use the more efficient {@code max-age=0} instead: <pre>   {@code\n *         connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n * }</pre>\n *\n * <h3>Force a Cache Response</h3>",
      "metadata": {
        "total_chunks": 18,
        "commit_count": 5,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Cache.java",
        "chunk_index": 1,
        "strategy": "enhanced",
        "language": "java"
      },
      "similarity_score": 0.8947926759719849
    },
    {
      "content": "### Commit 3\n- ID: 112f020c\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-11-01 23:53:05\n- Message: Change the cache to have non-shared semantics.\n\nThis means we'll cache responses that use an 'Authorization' header. This\nmeans OkHttp's cache shouldn't be used on middleboxes that sit between\nuser agents and the origin server; in practice this is never a use case\nfor OkHttp.\n\nFixes https://github.com/square/okhttp/issues/1035\n- Changes:\n```diff\n@@ -1098,36 +1098,8 @@ public final class UrlConnectionCacheTest {\n     assertEquals(\"\", readAscii(connection));\n   }\n \n-  @Test public void authorizationRequestHeaderPreventsCaching() throws Exception {\n-    server.enqueue(\n-        new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2, TimeUnit.MINUTES))\n-            .addHeader(\"Cache-Control: max-age=60\")\n-            .setBody(\"A\"));\n-    server.enqueue(new MockResponse().setBody(\"B\"));\n-\n-    URL url = server.getUrl(\"/\");\n-    URLCo...\n```\n\n### Commit 4\n- ID: f80b1f3a\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-10-25 23:42:10\n- Message: Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from our buffer to the cached file\non disk. Unfortunately we were copying N bytes from the front of the buffer\nwhen we wanted N bytes from the back of the buffer.\n\nTypically these are the same, but certain access patterns can cause them\nto be different, corrpting the cached file on disk.",
      "metadata": {
        "language": "java",
        "commit_count": 4,
        "strategy": "enhanced",
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java",
        "chunk_index": 47,
        "total_chunks": 49
      },
      "similarity_score": 0.8995704650878906
    },
    {
      "content": "/**\n     * Returns a strategy to satisfy {@code request} using the a cached response\n     * {@code response}.\n     */\n    public CacheStrategy get() {\n      CacheStrategy candidate = getCandidate();\n\n      if (candidate.networkRequest != null && request.cacheControl().onlyIfCached()) {\n        // We're forbidden from using the network and the cache is insufficient.\n        return new CacheStrategy(null, null);\n      }\n\n      return candidate;\n    }\n\n    /** Returns a strategy to use assuming the request can use the network. */\n    private CacheStrategy getCandidate() {\n      // No cached response.\n      if (cacheResponse == null) {\n        return new CacheStrategy(request, null);\n      }\n\n      // Drop the cached response if it's missing a required handshake.\n      if (request.isHttps() && cacheResponse.handshake() == null) {\n        return new CacheStrategy(request, null);\n      }\n\n      // If this response shouldn't have been stored, it should never be used\n      // as a response source. This check should be redundant as long as the\n      // persistence store is well-behaved and the rules are constant.\n      if (!isCacheable(cacheResponse, request)) {\n        return new CacheStrategy(request, null);\n      }\n\n      CacheControl requestCaching = request.cacheControl();\n      if (requestCaching.noCache() || hasConditions(request)) {\n        return new CacheStrategy(request, null);\n      }\n\n      long ageMillis = cacheResponseAge();\n      long freshMillis = computeFreshnessLifetime();\n\n      if (requestCaching.maxAgeSeconds() != -1) {\n        freshMillis = Math.min(freshMillis, SECONDS.toMillis(requestCaching.maxAgeSeconds()));\n      }\n\n      long minFreshMillis = 0;\n      if (requestCaching.minFreshSeconds() != -1) {\n        minFreshMillis = SECONDS.toMillis(requestCaching.minFreshSeconds());\n      }",
      "metadata": {
        "chunk_index": 3,
        "total_chunks": 9,
        "language": "java",
        "commit_count": 5,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java",
        "strategy": "enhanced"
      },
      "similarity_score": 0.9025353789329529
    },
    {
      "content": "### Commit 2\n- ID: e74e3f3b\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-12-22 02:25:41\n- Message: Move cache writing out of the transport.\n\nThis is necessary to unblock network interceptors, where the interceptor\nmay elect to rewrite the response body. If we've already cached the\noriginal response body, we're too late.\n- Changes:\n```diff\n@@ -556,9 +556,11 @@ public final class ResponseCacheTest {\n     HttpURLConnection request1 = openConnection(url);\n     request1.setRequestMethod(requestMethod);\n     addRequestBodyIfNecessary(requestMethod, request1);\n+    request1.getInputStream().close();\n     assertEquals(\"1\", request1.getHeaderField(\"X-Response-ID\"));\n \n     URLConnection request2 = openConnection(url);\n+    request2.getInputStream().close();\n     if (expectCached) {\n       assertEquals(\"1\", request2.getHeaderField(\"X-Respo...\n```\n\n### Commit 3\n- ID: 112f020c\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-11-01 23:53:05\n- Message: Change the cache to have non-shared semantics.\n\nThis means we'll cache responses that use an 'Authorization' header. This\nmeans OkHttp's cache shouldn't be used on middleboxes that sit between\nuser agents and the origin server; in practice this is never a use case\nfor OkHttp.\n\nFixes https://github.com/square/okhttp/issues/1035\n- Changes:\n```diff\n@@ -917,36 +917,8 @@ public final class ResponseCacheTest {\n     assertEquals(\"\", readAscii(connection));\n   }\n \n-  @Test public void authorizationRequestHeaderPreventsCaching() throws Exception {\n-    server.enqueue(\n-        new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2, TimeUnit.MINUTES))\n-            .addHeader(\"Cache-Control: max-age=60\")\n-            .setBody(\"A\"));\n-    server.enqueue(new MockResponse().setBody(\"B\"));\n-\n-    URL url = server.getUrl(\"/\");\n-    URLConnectio...\n```",
      "metadata": {
        "language": "java",
        "strategy": "enhanced",
        "chunk_index": 41,
        "commit_count": 4,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java",
        "total_chunks": 43
      },
      "similarity_score": 0.9049147963523865
    },
    {
      "content": "Response response = get(server.getUrl(\"/\"));\n    assertEquals(\"A\", response.header(\"\"));\n  }\n\n  /**\n   * Old implementations of OkHttp's response cache wrote header fields like\n   * \":status: 200 OK\". This broke our cached response parser because it split\n   * on the first colon. This regression test exists to help us read these old\n   * bad cache entries.\n   *\n   * https://github.com/square/okhttp/issues/227\n   */\n  @Test public void testGoldenCacheResponse() throws Exception {\n    cache.close();\n    server.enqueue(new MockResponse()\n        .clearHeaders()\n        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));",
      "metadata": {
        "language": "java",
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java",
        "strategy": "enhanced",
        "total_chunks": 52,
        "chunk_index": 41,
        "commit_count": 5
      },
      "similarity_score": 0.9156109690666199
    },
    {
      "content": "### Commit 3\n- ID: e74e3f3b\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-12-22 02:25:41\n- Message: Move cache writing out of the transport.\n\nThis is necessary to unblock network interceptors, where the interceptor\nmay elect to rewrite the response body. If we've already cached the\noriginal response body, we're too late.\n- Changes:\n```diff\n@@ -660,9 +660,11 @@ public final class CacheTest {\n         .method(requestMethod, requestBodyOrNull(requestMethod))\n         .build();\n     Response response1 = client.newCall(request).execute();\n+    response1.body().close();\n     assertEquals(\"1\", response1.header(\"X-Response-ID\"));\n \n     Response response2 = get(url);\n+    response2.body().close();\n     if (expectCached) {\n       assertEquals(\"1\", response2.header(\"X-Response-ID\"));\n     } else {...\n```\n\n### Commit 4\n- ID: b72c9567\n- Author: Jake Wharton (jw@squareup.com)\n- Date: 2014-06-30 10:15:52\n- Message: Hook up the web socket reader and writer together.\n\nAdd a simple real-world recipe which talks to an echo server.\n- Changes:\n```diff\n@@ -1827,7 +1827,7 @@ public final class CacheTest {\n         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n \n     URL url = server.getUrl(\"/\");\n-    String urlKey = Util.hash(url.toString());\n+    String urlKey = Util.md5Hex(url.toString());\n     String entryMetadata = \"\"\n         + \"\" + url + \"\\n\"\n         + \"GET\\n\"...\n```\n\n### Commit 5\n- ID: 1962206a\n- Author: Jesse Wilson (jwilson@squareup.com)\n- Date: 2014-11-04 23:02:51\n- Message: Implement DiskLruCache.evictAll and expose it in Cache.",
      "metadata": {
        "strategy": "enhanced",
        "commit_count": 5,
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java",
        "total_chunks": 52,
        "chunk_index": 50,
        "language": "java"
      },
      "similarity_score": 0.9227334260940552
    },
    {
      "content": "@Test public void responseCachingAndInputStreamSkipWithNoLengthHeaders() throws IOException {\n    testResponseCaching(TransferKind.END_OF_STREAM);\n  }\n\n  /**\n   * HttpURLConnection.getInputStream().skip(long) causes ResponseCache corruption\n   * http://code.google.com/p/android/issues/detail?id=8175\n   */\n  private void testResponseCaching(TransferKind transferKind) throws IOException {\n    MockResponse response =\n        new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n            .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n            .setStatus(\"HTTP/1.1 200 Fantastic\");\n    transferKind.setBody(response, \"I love puppies but hate spiders\", 1);\n    server.enqueue(response);\n\n    // Make sure that calling skip() doesn't omit bytes from the cache.\n    HttpURLConnection urlConnection = openConnection(server.getUrl(\"/\"));\n    InputStream in = urlConnection.getInputStream();\n    assertEquals(\"I love \", readAscii(urlConnection, \"I love \".length()));\n    reliableSkip(in, \"puppies but hate \".length());\n    assertEquals(\"spiders\", readAscii(urlConnection, \"spiders\".length()));\n    assertEquals(-1, in.read());\n    in.close();\n\n    urlConnection = openConnection(server.getUrl(\"/\")); // cached!\n    in = urlConnection.getInputStream();\n    assertEquals(\"I love puppies but hate spiders\",\n        readAscii(urlConnection, \"I love puppies but hate spiders\".length()));\n    assertEquals(200, urlConnection.getResponseCode());\n    assertEquals(\"Fantastic\", urlConnection.getResponseMessage());\n\n    assertEquals(-1, in.read());\n    in.close();\n  }\n\n  @Test public void secureResponseCaching() throws IOException {\n    server.useHttps(sslContext.getSocketFactory(), false);\n    server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1, TimeUnit.HOURS))\n        .addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS))\n        .setBody(\"ABC\"));",
      "metadata": {
        "strategy": "enhanced",
        "total_chunks": 43,
        "chunk_index": 3,
        "commit_count": 4,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java",
        "language": "java"
      },
      "similarity_score": 0.9232076406478882
    }
  ],
  "compressed": [
    {
      "content": "# File: okhttp-urlconnection/src/test/java/com/squareup/okhttp/AbstractResponseCache.java (java)\n\n## Key Code Elements:\nimport java.io.IOException;\nimport java.net.CacheRequest;\nimport java.net.CacheResponse;\nimport java.net.ResponseCache;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.List;\nimport java.util.Map;\n  @Override public CacheResponse get(URI uri, String requestMethod,\n  @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {\n\n## Recent Changes:\n- f80b1f3a by Jesse Wilson (jwilson@squareup.com): Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from...",
      "metadata": {
        "language": "java",
        "chunk_index": 0,
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/AbstractResponseCache.java",
        "commit_count": 1,
        "strategy": "compressed",
        "total_chunks": 1
      },
      "similarity_score": 0.9746378660202026
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/HeaderParser.java (java)\n\n## Recent Changes:\n- ddac0083 by Jesse Wilson (jwilson@squareup.com): Fix request cache-control to match spec.\n\nFixes https://github.com/square/okhttp/issues/1081...\n- 684aa14b by jwilson (jwilson@squareup.com): New CacheControl class.\n\nThis moves cache control headers from the main request\nand response classes...\n- 14b6e76e by jwilson (jwilson@squareup.com): Combine Request+RequestHeaders and Response+ResponseHeaders.\n\nThis cleans up a lot of the unnecessar...",
      "metadata": {
        "language": "java",
        "strategy": "compressed",
        "commit_count": 5,
        "chunk_index": 0,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HeaderParser.java",
        "total_chunks": 1
      },
      "similarity_score": 1.017980933189392
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/InternalCache.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport com.squareup.okhttp.internal.http.CacheRequest;\nimport com.squareup.okhttp.internal.http.CacheStrategy;\nimport java.io.IOException;\n * OkHttp's internal cache interface. Applications shouldn't implement this:\n\n## Recent Changes:\n- 3a4c1355 by Jake Wharton (jw@squareup.com): Convert disk cache to use Okio....\n- 22a03b59 by Jesse Wilson (jwilson@squareup.com): Drop ResponseSource....\n- 329750f9 by Jesse Wilson (jwilson@squareup.com): Rename HttpResponseCache to Cache.\n\nAlso move OkResponseCache.java into internal....",
      "metadata": {
        "strategy": "compressed",
        "commit_count": 3,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/InternalCache.java",
        "chunk_index": 0,
        "language": "java",
        "total_chunks": 1
      },
      "similarity_score": 1.0232064723968506
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/CacheControl.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.internal.http.HeaderParser;\nimport java.util.concurrent.TimeUnit;\n  @Override public String toString() {\n\n## Recent Changes:\n- 15c81fdf by Jake Wharton (jw@squareup.com): Normalize caching size in loop-local variable.\n\nThis was present in a bunch of loops, but not all an...\n- ddac0083 by Jesse Wilson (jwilson@squareup.com): Fix request cache-control to match spec.\n\nFixes https://github.com/square/okhttp/issues/1081...\n- da1d7f23 by Jesse Wilson (jwilson@squareup.com): More convenient APIs for using Cache-Control in requests....",
      "metadata": {
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/CacheControl.java",
        "total_chunks": 1,
        "commit_count": 4,
        "chunk_index": 0,
        "language": "java",
        "strategy": "compressed"
      },
      "similarity_score": 1.0499143600463867
    },
    {
      "content": "# File: samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Callback;\nimport com.squareup.okhttp.Headers;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport java.io.IOException;\n      @Override public void onFailure(Request request, IOException e) {\n      @Override public void onResponse(Response response) throws IOException {\n\n## Recent Changes:\n- 15c81fdf by Jake Wharton (jw@squareup.com): Normalize caching size in loop-local variable.\n\nThis was present in a bunch of loops, but not all an...\n- 6afd5768 by Jake Wharton (jw@squareup.com): Use IOException in Callback failure method....\n- f7c3bad8 by Jesse Wilson (jwilson@squareup.com): Give each recipe its own file....",
      "metadata": {
        "total_chunks": 1,
        "commit_count": 3,
        "chunk_index": 0,
        "language": "java",
        "strategy": "compressed",
        "file_path": "samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java"
      },
      "similarity_score": 1.0514605045318604
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/Request.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.internal.Platform;\nimport com.squareup.okhttp.internal.Util;\nimport com.squareup.okhttp.internal.http.HttpMethod;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.List;\n  @Override public String toString() {\n\n## Recent Changes:\n- 64b607fc by Jesse Wilson (jwilson@squareup.com): Request body buffering is not transport-specific.\n\nPreviously we were only buffering the request bod...\n- da1d7f23 by Jesse Wilson (jwilson@squareup.com): More convenient APIs for using Cache-Control in requests....\n- 91c2c7bf by Richard Thai (rthai@groupon.com): Request URI's have a dependency on the request URL (if the URI is uninitialized). However, URL's can...",
      "metadata": {
        "commit_count": 5,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/Request.java",
        "total_chunks": 1,
        "language": "java",
        "chunk_index": 0,
        "strategy": "compressed"
      },
      "similarity_score": 1.0594348907470703
    },
    {
      "content": "# File: okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.AbstractResponseCache;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.OkUrlFactory;\nimport com.squareup.okhttp.internal.Internal;\nimport java.io.IOException;\nimport java.net.CacheResponse;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\n## Recent Changes:\n- f80b1f3a by Jesse Wilson (jwilson@squareup.com): Fix a bug where the response cache could be corrupted.\n\nWhen streaming a response, we copy data from...",
      "metadata": {
        "file_path": "okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java",
        "chunk_index": 0,
        "strategy": "compressed",
        "total_chunks": 1,
        "commit_count": 1,
        "language": "java"
      },
      "similarity_score": 1.0718555450439453
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport com.squareup.okhttp.ResponseBody;\nimport java.io.IOException;\nimport okio.Sink;\n\n## Recent Changes:\n- 32b7675b by Jesse Wilson (jwilson@squareup.com): Use ResponseBody to model the response body everywhere.\n\nThis makes cache writing and gzip layering ...\n- e74e3f3b by Jesse Wilson (jwilson@squareup.com): Move cache writing out of the transport.\n\nThis is necessary to unblock network interceptors, where t...\n- 64b607fc by Jesse Wilson (jwilson@squareup.com): Request body buffering is not transport-specific.\n\nPreviously we were only buffering the request bod...",
      "metadata": {
        "commit_count": 5,
        "chunk_index": 0,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java",
        "total_chunks": 1,
        "language": "java",
        "strategy": "compressed"
      },
      "similarity_score": 1.0754142999649048
    },
    {
      "content": "# File: okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java (java)\n\n## Key Code Elements:\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Arrays;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\n## Recent Changes:\n- 41e6e51a by Jesse Wilson (jwilson@squareup.com): Accept other messages when testing canceled requests....\n- a87147e6 by Jesse Wilson (jwilson@squareup.com): Fix a bug where the cacheResponse's request method was wrong.\n\nWe were returning the message (like '...\n- 6afd5768 by Jake Wharton (jw@squareup.com): Use IOException in Callback failure method....",
      "metadata": {
        "chunk_index": 0,
        "commit_count": 5,
        "file_path": "okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java",
        "language": "java",
        "total_chunks": 1,
        "strategy": "compressed"
      },
      "similarity_score": 1.097428798675537
    },
    {
      "content": "# File: okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport com.squareup.okhttp.internal.InternalCache;\nimport com.squareup.okhttp.internal.http.CacheRequest;\nimport com.squareup.okhttp.internal.http.CacheStrategy;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.CacheResponse;\nimport java.net.HttpURLConnection;\nimport java.net.ResponseCache;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport okio.Okio;\nimport okio.Sink;\n\n## Recent Changes:\n- 3a4c1355 by Jake Wharton (jw@squareup.com): Convert disk cache to use Okio....\n- 22a03b59 by Jesse Wilson (jwilson@squareup.com): Drop ResponseSource....\n- 0676d8b1 by Jesse Wilson (jwilson@squareup.com): Move code to the urlconnection module.\n\nWe don't need this code for the core OkHttp API....",
      "metadata": {
        "chunk_index": 0,
        "total_chunks": 1,
        "language": "java",
        "strategy": "compressed",
        "commit_count": 3,
        "file_path": "okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java"
      },
      "similarity_score": 1.098806381225586
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.CacheControl;\nimport com.squareup.okhttp.Headers;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport java.util.Date;\nimport static com.squareup.okhttp.internal.http.StatusLine.HTTP_PERM_REDIRECT;\nimport static java.net.HttpURLConnection.HTTP_GONE;\nimport static java.net.HttpURLConnection.HTTP_MOVED_PERM;\nimport static java.net.HttpURLConnection.HTTP_MULT_CHOICE;\nimport static java.net.HttpURLConnection.HTTP_NOT_AUTHORITATIVE;\nimport static java.net.HttpURLConnection.HTTP_OK;\nimport static java.util.concurrent.TimeUnit.SECONDS;\n\n## Recent Changes:\n- 15c81fdf by Jake Wharton (jw@squareup.com): Normalize caching size in loop-local variable.\n\nThis was present in a bunch of loops, but not all an...\n- 112f020c by Jesse Wilson (jwilson@squareup.com): Change the cache to have non-shared semantics.\n\nThis means we'll cache responses that use an 'Author...\n- ddac0083 by Jesse Wilson (jwilson@squareup.com): Fix request cache-control to match spec.\n\nFixes https://github.com/square/okhttp/issues/1081...",
      "metadata": {
        "total_chunks": 1,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java",
        "commit_count": 5,
        "language": "java",
        "strategy": "compressed",
        "chunk_index": 0
      },
      "similarity_score": 1.1077684164047241
    },
    {
      "content": "# File: okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Headers;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.RequestBody;\nimport com.squareup.okhttp.Response;\nimport com.squareup.okhttp.ResponseBody;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport org.apache.http.Header;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpHost;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\n\n## Recent Changes:\n- 15c81fdf by Jake Wharton (jw@squareup.com): Normalize caching size in loop-local variable.\n\nThis was present in a bunch of loops, but not all an...\n- b16c9f29 by Jake Wharton (jw@squareup.com): Support overriding content type via explicit header....\n- 9fcb67db by Jesse Wilson (jwilson@squareup.com): Rename Request.Body to RequestBody and Response.Body to ResponseBody.\n\nCompelling alternative is Rea...",
      "metadata": {
        "total_chunks": 1,
        "language": "java",
        "strategy": "compressed",
        "file_path": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java",
        "chunk_index": 0,
        "commit_count": 5
      },
      "similarity_score": 1.1081840991973877
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/RetryableSink.java (java)\n\n## Key Code Elements:\nimport java.io.IOException;\nimport java.net.ProtocolException;\nimport okio.Buffer;\nimport okio.Sink;\nimport okio.Timeout;\nimport static com.squareup.okhttp.internal.Util.checkOffsetAndCount;\n  @Override public void close() throws IOException {\n  @Override public void write(Buffer source, long byteCount) throws IOException {\n  @Override public void flush() throws IOException {\n  @Override public Timeout timeout() {\n\n## Recent Changes:\n- 64b607fc by Jesse Wilson (jwilson@squareup.com): Request body buffering is not transport-specific.\n\nPreviously we were only buffering the request bod...\n- 7e28b1d6 by Jesse Wilson (jwilson@squareup.com): Change HttpResponseCache to not implement java.net.ResponseCache.\n\nThis marks some methods as @Depre...\n- 7bfcaa60 by Jake Wharton (jw@squareup.com): Use more convenience methods from Okio 0.8.0....",
      "metadata": {
        "strategy": "compressed",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/RetryableSink.java",
        "total_chunks": 1,
        "language": "java",
        "commit_count": 5,
        "chunk_index": 0
      },
      "similarity_score": 1.1446268558502197
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.Headers;\nimport com.squareup.okhttp.MediaType;\nimport com.squareup.okhttp.ResponseBody;\nimport okio.BufferedSource;\n  @Override public MediaType contentType() {\n  @Override public long contentLength() {\n  @Override public BufferedSource source() {\n\n## Recent Changes:\n- 32b7675b by Jesse Wilson (jwilson@squareup.com): Use ResponseBody to model the response body everywhere.\n\nThis makes cache writing and gzip layering ...",
      "metadata": {
        "strategy": "compressed",
        "total_chunks": 1,
        "language": "java",
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java",
        "chunk_index": 0,
        "commit_count": 1
      },
      "similarity_score": 1.1491779088974
    },
    {
      "content": "# File: mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java (java)\n\n## Recent Changes:\n- 5b6f64a4 by Jesse Wilson (jwilson@squareup.com): Fix HTTP post retransmit in the new API.\n\nWe don't buffer response bodies in the new API. But we sho...\n- 1cfab333 by lingming.yb (lingming.yb@alibaba-inc.com): add read response header timeout case...\n- d5ab35a2 by jwilson (jwilson@squareup.com): Use the OkHttp code style in MockWebServer...",
      "metadata": {
        "total_chunks": 1,
        "strategy": "compressed",
        "commit_count": 4,
        "language": "java",
        "chunk_index": 0,
        "file_path": "mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java"
      },
      "similarity_score": 1.1685805320739746
    },
    {
      "content": "# File: okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.MediaType;\nimport com.squareup.okhttp.RequestBody;\nimport java.io.IOException;\nimport okio.BufferedSink;\nimport org.apache.http.HttpEntity;\n  @Override public long contentLength() {\n  @Override public MediaType contentType() {\n  @Override public void writeTo(BufferedSink sink) throws IOException {\n\n## Recent Changes:\n- b16c9f29 by Jake Wharton (jw@squareup.com): Support overriding content type via explicit header....\n- 9fcb67db by Jesse Wilson (jwilson@squareup.com): Rename Request.Body to RequestBody and Response.Body to ResponseBody.\n\nCompelling alternative is Rea...\n- b8e50f57 by Jake Wharton (jw@squareup.com): Update OkApacheClient to use new API....",
      "metadata": {
        "total_chunks": 1,
        "language": "java",
        "file_path": "okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java",
        "strategy": "compressed",
        "chunk_index": 0,
        "commit_count": 3
      },
      "similarity_score": 1.1746783256530762
    },
    {
      "content": "# File: okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java (java)\n\n## Recent Changes:\n- 5e62ed01 by Jake Wharton (jw@squareup.com): Move a constant to the file of its only use....\n- 64b607fc by Jesse Wilson (jwilson@squareup.com): Request body buffering is not transport-specific.\n\nPreviously we were only buffering the request bod...\n- cdd71f1b by Jake Wharton (jw@squareup.com): Update the language level to Java 7....",
      "metadata": {
        "chunk_index": 0,
        "strategy": "compressed",
        "total_chunks": 1,
        "commit_count": 5,
        "file_path": "okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java",
        "language": "java"
      },
      "similarity_score": 1.1764061450958252
    },
    {
      "content": "# File: samples/guide/src/main/java/com/squareup/okhttp/guide/PostExample.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.MediaType;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.RequestBody;\nimport com.squareup.okhttp.Response;\nimport java.io.IOException;\n\n## Recent Changes:\n- 1a1cc18f by Jesse Wilson (jwilson@squareup.com): Update samples and marketing site....\n- 9fcb67db by Jesse Wilson (jwilson@squareup.com): Rename Request.Body to RequestBody and Response.Body to ResponseBody.\n\nCompelling alternative is Rea...\n- 520d9fc2 by Adrian Cole (adrian@squareup.com): Support common http verbs including zero length POST, DELETE....",
      "metadata": {
        "total_chunks": 1,
        "chunk_index": 0,
        "file_path": "samples/guide/src/main/java/com/squareup/okhttp/guide/PostExample.java",
        "commit_count": 5,
        "strategy": "compressed",
        "language": "java"
      },
      "similarity_score": 1.1767650842666626
    },
    {
      "content": "# File: okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java (java)\n\n## Key Code Elements:\nimport com.squareup.okhttp.internal.InternalCache;\nimport com.squareup.okhttp.internal.huc.CacheAdapter;\nimport com.squareup.okhttp.internal.huc.HttpURLConnectionImpl;\nimport com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl;\nimport java.net.HttpURLConnection;\nimport java.net.Proxy;\nimport java.net.ResponseCache;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLStreamHandler;\nimport java.net.URLStreamHandlerFactory;\n  @Override public OkUrlFactory clone() {\n  @Override public URLStreamHandler createURLStreamHandler(final String protocol) {\n      @Override protected URLConnection openConnection(URL url) {\n      @Override protected URLConnection openConnection(URL url, Proxy proxy) {\n\n## Recent Changes:\n- 0676d8b1 by Jesse Wilson (jwilson@squareup.com): Move code to the urlconnection module.\n\nWe don't need this code for the core OkHttp API....\n- 271cc7b6 by Jesse Wilson (jwilson@squareup.com): First steps at making URLConnection a shim.\n\nThis extracts the URLConnection APIs to their own proje...",
      "metadata": {
        "strategy": "compressed",
        "chunk_index": 0,
        "file_path": "okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java",
        "total_chunks": 1,
        "language": "java",
        "commit_count": 2
      },
      "similarity_score": 1.1792393922805786
    },
    {
      "content": "# File: benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java (java)\n\n## Key Code Elements:\n    @Override HttpClient create() {\n    @Override HttpClient create() {\n    @Override HttpClient create() {\n    @Override HttpClient create() {\n    @Override HttpClient create() {\n\n## Recent Changes:\n- 4313b7af by jwilson (jwilson@squareup.com): Promote the target backlog to a parameter....\n- 99841aec by jwilson (jwilson@squareup.com): Use Caliper for benchmarking....",
      "metadata": {
        "strategy": "compressed",
        "commit_count": 2,
        "total_chunks": 1,
        "file_path": "benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java",
        "language": "java",
        "chunk_index": 0
      },
      "similarity_score": 1.1881992816925049
    }
  ]
}