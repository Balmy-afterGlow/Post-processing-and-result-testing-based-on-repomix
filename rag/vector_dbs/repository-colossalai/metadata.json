{
  "repo_name": "colossalai",
  "source_file": "../repomix_md/repository-colossalai/repomix-output-colossalai-with-git.md",
  "file_size_mb": 20.260421752929688,
  "build_time": "2025-06-15T11:43:09.259997",
  "processing_time": {
    "parse_time_seconds": 10.291693,
    "index_time_seconds": 138.438516,
    "total_time_seconds": 148.730209
  },
  "code_blocks_count": 1495,
  "original_documents_count": {
    "basic": 5346,
    "enhanced": 7310,
    "compressed": 1495
  },
  "filtered_documents_count": {
    "basic": 2000,
    "enhanced": 2000,
    "compressed": 1495
  },
  "optimization_settings": {
    "max_documents_per_version": 2000,
    "min_content_length": 100,
    "batch_size": 100,
    "max_file_size_mb": 5.0
  },
  "total_commits": 4062,
  "files_processed": [
    ".github/ISSUE_TEMPLATE/bug-report.yml",
    ".github/ISSUE_TEMPLATE/config.yml",
    ".github/ISSUE_TEMPLATE/documentation.yml",
    ".github/ISSUE_TEMPLATE/feature_request.yml",
    ".github/ISSUE_TEMPLATE/proposal.yml",
    ".github/workflows/scripts/example_checks/check_dispatch_inputs.py",
    ".github/workflows/scripts/example_checks/check_example_weekly.py",
    ".github/workflows/scripts/example_checks/detect_changed_example.py",
    ".github/workflows/scripts/check_doc_i18n.py",
    ".github/workflows/scripts/generate_leaderboard_and_send_to_lark.py",
    ".github/workflows/scripts/generate_release_draft.py",
    ".github/workflows/scripts/send_message_to_lark.py",
    ".github/workflows/build_on_pr.yml",
    ".github/workflows/build_on_schedule.yml",
    ".github/workflows/close_inactive.yml",
    ".github/workflows/compatiblity_test_on_dispatch.yml",
    ".github/workflows/compatiblity_test_on_pr.yml",
    ".github/workflows/compatiblity_test_on_schedule.yml",
    ".github/workflows/cuda_ext_check_before_merge.yml",
    ".github/workflows/doc_build_after_merge.yml",
    ".github/workflows/doc_check_on_pr.yml",
    ".github/workflows/doc_test_on_pr.yml",
    ".github/workflows/doc_test_on_schedule.yml",
    ".github/workflows/draft_github_release_post_after_merge.yml",
    ".github/workflows/example_check_on_dispatch.yml",
    ".github/workflows/example_check_on_pr.yml",
    ".github/workflows/example_check_on_schedule.yml",
    ".github/workflows/post_commit.yml",
    ".github/workflows/README.md",
    ".github/workflows/release_docker_after_merge.yml",
    ".github/workflows/release_nightly_on_schedule.yml",
    ".github/workflows/release_pypi_after_merge.yml",
    ".github/workflows/release_test_pypi_before_merge.yml",
    ".github/workflows/report_leaderboard_to_lark.yml",
    ".github/workflows/report_test_coverage.yml",
    ".github/workflows/run_chatgpt_examples.yml",
    ".github/workflows/run_chatgpt_unit_tests.yml",
    ".github/workflows/submodule.yml",
    ".github/workflows/translate_comment.yml",
    "applications/Chat/benchmarks/benchmark_gpt_dummy.py",
    "applications/Chat/benchmarks/benchmark_gpt_dummy.sh",
    "applications/Chat/benchmarks/benchmark_opt_lora_dummy.py",
    "applications/Chat/benchmarks/README.md",
    "applications/Chat/coati/dataset/__init__.py",
    "applications/Chat/coati/dataset/prompt_dataset.py",
    "applications/Chat/coati/dataset/reward_dataset.py",
    "applications/Chat/coati/dataset/sft_dataset.py",
    "applications/Chat/coati/dataset/utils.py",
    "applications/Chat/coati/experience_maker/__init__.py",
    "applications/Chat/coati/experience_maker/base.py",
    "applications/Chat/coati/experience_maker/naive.py",
    "applications/Chat/coati/models/base/__init__.py",
    "applications/Chat/coati/models/base/actor.py",
    "applications/Chat/coati/models/base/critic.py",
    "applications/Chat/coati/models/base/lm.py",
    "applications/Chat/coati/models/base/reward_model.py",
    "applications/Chat/coati/models/bloom/__init__.py",
    "applications/Chat/coati/models/bloom/bloom_actor.py",
    "applications/Chat/coati/models/bloom/bloom_critic.py",
    "applications/Chat/coati/models/bloom/bloom_lm.py",
    "applications/Chat/coati/models/bloom/bloom_rm.py",
    "applications/Chat/coati/models/deberta/__init__.py",
    "applications/Chat/coati/models/deberta/deberta_critic.py",
    "applications/Chat/coati/models/deberta/deberta_rm.py",
    "applications/Chat/coati/models/gpt/__init__.py",
    "applications/Chat/coati/models/gpt/gpt_actor.py",
    "applications/Chat/coati/models/gpt/gpt_critic.py",
    "applications/Chat/coati/models/gpt/gpt_lm.py",
    "applications/Chat/coati/models/gpt/gpt_rm.py",
    "applications/Chat/coati/models/llama/__init__.py",
    "applications/Chat/coati/models/llama/llama_actor.py",
    "applications/Chat/coati/models/llama/llama_critic.py",
    "applications/Chat/coati/models/llama/llama_lm.py",
    "applications/Chat/coati/models/llama/llama_rm.py",
    "applications/Chat/coati/models/opt/__init__.py",
    "applications/Chat/coati/models/opt/opt_actor.py",
    "applications/Chat/coati/models/opt/opt_critic.py",
    "applications/Chat/coati/models/opt/opt_lm.py",
    "applications/Chat/coati/models/opt/opt_rm.py",
    "applications/Chat/coati/models/roberta/__init__.py",
    "applications/Chat/coati/models/roberta/roberta_actor.py",
    "applications/Chat/coati/models/roberta/roberta_critic.py",
    "applications/Chat/coati/models/roberta/roberta_rm.py",
    "applications/Chat/coati/models/__init__.py",
    "applications/Chat/coati/models/generation_utils.py",
    "applications/Chat/coati/models/generation.py",
    "applications/Chat/coati/models/lora.py",
    "applications/Chat/coati/models/loss.py",
    "applications/Chat/coati/models/utils.py",
    "applications/Chat/coati/ray/example/1m1t.py",
    "applications/Chat/coati/ray/example/1m1t.sh",
    "applications/Chat/coati/ray/example/1m2t.py",
    "applications/Chat/coati/ray/example/1m2t.sh",
    "applications/Chat/coati/ray/example/2m1t.py",
    "applications/Chat/coati/ray/example/2m1t.sh",
    "applications/Chat/coati/ray/example/2m2t.py",
    "applications/Chat/coati/ray/example/2m2t.sh",
    "applications/Chat/coati/ray/src/detached_replay_buffer.py",
    "applications/Chat/coati/ray/src/detached_trainer_base.py",
    "applications/Chat/coati/ray/src/detached_trainer_ppo.py",
    "applications/Chat/coati/ray/src/experience_maker_holder.py",
    "applications/Chat/coati/ray/src/pipeline_strategy.py",
    "applications/Chat/coati/ray/src/utils.py",
    "applications/Chat/coati/ray/__init__.py",
    "applications/Chat/coati/replay_buffer/__init__.py",
    "applications/Chat/coati/replay_buffer/base.py",
    "applications/Chat/coati/replay_buffer/naive.py",
    "applications/Chat/coati/replay_buffer/utils.py",
    "applications/Chat/coati/trainer/callbacks/__init__.py",
    "applications/Chat/coati/trainer/callbacks/base.py",
    "applications/Chat/coati/trainer/callbacks/performance_evaluator.py",
    "applications/Chat/coati/trainer/callbacks/save_checkpoint.py",
    "applications/Chat/coati/trainer/strategies/__init__.py",
    "applications/Chat/coati/trainer/strategies/base.py",
    "applications/Chat/coati/trainer/strategies/colossalai.py",
    "applications/Chat/coati/trainer/strategies/ddp.py",
    "applications/Chat/coati/trainer/strategies/naive.py",
    "applications/Chat/coati/trainer/strategies/sampler.py",
    "applications/Chat/coati/trainer/__init__.py",
    "applications/Chat/coati/trainer/base.py",
    "applications/Chat/coati/trainer/ppo.py",
    "applications/Chat/coati/trainer/rm.py",
    "applications/Chat/coati/trainer/sft.py",
    "applications/Chat/coati/trainer/utils.py",
    "applications/Chat/coati/utils/__init__.py",
    "applications/Chat/coati/utils/tokenizer_utils.py",
    "applications/Chat/evaluate/evaluate.py",
    "applications/Chat/evaluate/evaluate.sh",
    "applications/Chat/evaluate/format_questions.py",
    "applications/Chat/evaluate/format_questions.sh",
    "applications/Chat/evaluate/generate_answers.py",
    "applications/Chat/evaluate/generate_answers.sh",
    "applications/Chat/evaluate/generate_gpt35_answers.py",
    "applications/Chat/evaluate/generate_gpt35_answers.sh",
    "applications/Chat/evaluate/merge.py",
    "applications/Chat/evaluate/README.md",
    "applications/Chat/evaluate/utils.py",
    "applications/Chat/examples/community/peft/easy_dataset.py",
    "applications/Chat/examples/community/peft/easy_models.py",
    "applications/Chat/examples/community/peft/README.md",
    "applications/Chat/examples/community/peft/train_peft_prompts.py",
    "applications/Chat/examples/community/peft/train_peft_sft.py",
    "applications/Chat/examples/community/ray/ray_job_script.py",
    "applications/Chat/examples/community/ray/README.md",
    "applications/Chat/examples/community/ray/train_prompts_on_ray.py",
    "applications/Chat/examples/community/README.md",
    "applications/Chat/examples/inference.py",
    "applications/Chat/examples/README.md",
    "applications/Chat/examples/requirements.txt",
    "applications/Chat/examples/test_ci.sh",
    "applications/Chat/examples/train_dummy.py",
    "applications/Chat/examples/train_dummy.sh",
    "applications/Chat/examples/train_prompts.py",
    "applications/Chat/examples/train_prompts.sh",
    "applications/Chat/examples/train_reward_model.py",
    "applications/Chat/examples/train_rm.sh",
    "applications/Chat/examples/train_sft.py",
    "applications/Chat/examples/train_sft.sh",
    "applications/Chat/inference/llama_gptq/__init__.py",
    "applications/Chat/inference/llama_gptq/loader.py",
    "applications/Chat/inference/llama_gptq/model_utils.py",
    "applications/Chat/inference/llama_gptq/quant.py",
    "applications/Chat/inference/tests/test_chat_prompt.py",
    "applications/Chat/inference/benchmark.py",
    "applications/Chat/inference/locustfile.py",
    "applications/Chat/inference/README.md",
    "applications/Chat/inference/requirements.txt",
    "applications/Chat/inference/server.py",
    "applications/Chat/inference/utils.py",
    "applications/Chat/tests/test_checkpoint.py",
    "applications/Chat/tests/test_data.py",
    "applications/Chat/.gitignore",
    "applications/Chat/LICENSE",
    "applications/Chat/pytest.ini",
    "applications/Chat/README.md",
    "applications/Chat/requirements-test.txt",
    "applications/Chat/requirements.txt",
    "applications/Chat/setup.py",
    "applications/Chat/version.txt",
    "applications/README.md",
    "colossalai/_analyzer/_subclasses/__init__.py",
    "colossalai/_analyzer/_subclasses/_meta_registration.py",
    "colossalai/_analyzer/_subclasses/_monkey_patch.py",
    "colossalai/_analyzer/_subclasses/flop_tensor.py",
    "colossalai/_analyzer/_subclasses/meta_tensor.py",
    "colossalai/_analyzer/fx/passes/__init__.py",
    "colossalai/_analyzer/fx/passes/graph_profile.py",
    "colossalai/_analyzer/fx/passes/shape_prop.py",
    "colossalai/_analyzer/fx/tracer/__init__.py",
    "colossalai/_analyzer/fx/tracer/bias_addition.py",
    "colossalai/_analyzer/fx/tracer/custom_leaf_module.py",
    "colossalai/_analyzer/fx/tracer/proxy.py",
    "colossalai/_analyzer/fx/tracer/symbolic_trace.py",
    "colossalai/_analyzer/fx/tracer/tracer.py",
    "colossalai/_analyzer/fx/__init__.py",
    "colossalai/_analyzer/fx/codegen.py",
    "colossalai/_analyzer/fx/graph_module.py",
    "colossalai/_analyzer/fx/node_util.py",
    "colossalai/_analyzer/fx/symbolic_profile.py",
    "colossalai/_analyzer/envs.py",
    "colossalai/_analyzer/README.md",
    "colossalai/amp/apex_amp/__init__.py",
    "colossalai/amp/apex_amp/apex_amp.py",
    "colossalai/amp/naive_amp/grad_scaler/__init__.py",
    "colossalai/amp/naive_amp/grad_scaler/base_grad_scaler.py",
    "colossalai/amp/naive_amp/grad_scaler/constant_grad_scaler.py",
    "colossalai/amp/naive_amp/grad_scaler/dynamic_grad_scaler.py",
    "colossalai/amp/naive_amp/__init__.py",
    "colossalai/amp/naive_amp/_fp16_optimizer.py",
    "colossalai/amp/naive_amp/_utils.py",
    "colossalai/amp/naive_amp/naive_amp.py",
    "colossalai/amp/torch_amp/__init__.py",
    "colossalai/amp/torch_amp/_grad_scaler.py",
    "colossalai/amp/torch_amp/torch_amp.py",
    "colossalai/amp/__init__.py",
    "colossalai/amp/amp_type.py",
    "colossalai/auto_parallel/checkpoint/__init__.py",
    "colossalai/auto_parallel/checkpoint/build_c_ext.py",
    "colossalai/auto_parallel/checkpoint/ckpt_solver_base.py",
    "colossalai/auto_parallel/checkpoint/ckpt_solver_chen.py",
    "colossalai/auto_parallel/checkpoint/ckpt_solver_rotor.c",
    "colossalai/auto_parallel/checkpoint/ckpt_solver_rotor.py",
    "colossalai/auto_parallel/checkpoint/operation.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/__init__.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/activation.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/binary_elementwise_ops.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/conv.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/embedding.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/linear.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/non_spmd.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/norm.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/pooling.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/tensor.py",
    "colossalai/auto_parallel/meta_profiler/meta_registry/where.py",
    "colossalai/auto_parallel/meta_profiler/__init__.py",
    "colossalai/auto_parallel/meta_profiler/constants.py",
    "colossalai/auto_parallel/meta_profiler/registry.py",
    "colossalai/auto_parallel/meta_profiler/shard_metainfo.py",
    "colossalai/auto_parallel/offload/amp_optimizer.py",
    "colossalai/auto_parallel/offload/base_offload_module.py",
    "colossalai/auto_parallel/offload/mem_optimize.py",
    "colossalai/auto_parallel/offload/region_manager.py",
    "colossalai/auto_parallel/offload/region.py",
    "colossalai/auto_parallel/offload/runtime.py",
    "colossalai/auto_parallel/offload/solver.py",
    "colossalai/auto_parallel/offload/training_simulator.py",
    "colossalai/auto_parallel/offload/util.py",
    "colossalai/auto_parallel/passes/comm_metainfo_pass.py",
    "colossalai/auto_parallel/passes/constants.py",
    "colossalai/auto_parallel/passes/meta_info_prop.py",
    "colossalai/auto_parallel/passes/runtime_apply_pass.py",
    "colossalai/auto_parallel/passes/runtime_preparation_pass.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/__init__.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/batch_norm_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/binary_elementwise_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/conv_strategy_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/embedding_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/getattr_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/getitem_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/layer_norm_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/matmul_strategy_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/normal_pooling_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/output_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/placeholder_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/reshape_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/softmax_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/strategy_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/sum_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/tensor_constructor_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/unary_elementwise_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/strategy/where_generator.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/__init__.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/addmm_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/batch_norm_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/binary_elementwise_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/bmm_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/conv_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/default_reshape_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/embedding_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/getattr_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/getitem_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/layer_norm_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/linear_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/matmul_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/node_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/normal_pooling_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/output_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/permute_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/placeholder_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/registry.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/softmax_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/split_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/sum_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/tensor_constructor_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/transpose_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/unary_elementwise_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/view_handler.py",
    "colossalai/auto_parallel/tensor_shard/node_handler/where_handler.py",
    "colossalai/auto_parallel/tensor_shard/solver/__init__.py",
    "colossalai/auto_parallel/tensor_shard/solver/cost_graph.py",
    "colossalai/auto_parallel/tensor_shard/solver/graph_analysis.py",
    "colossalai/auto_parallel/tensor_shard/solver/solver.py",
    "colossalai/auto_parallel/tensor_shard/solver/strategies_constructor.py",
    "colossalai/auto_parallel/tensor_shard/utils/__init__.py",
    "colossalai/auto_parallel/tensor_shard/utils/broadcast.py",
    "colossalai/auto_parallel/tensor_shard/utils/factory.py",
    "colossalai/auto_parallel/tensor_shard/utils/misc.py",
    "colossalai/auto_parallel/tensor_shard/utils/reshape.py",
    "colossalai/auto_parallel/tensor_shard/utils/sharding.py",
    "colossalai/auto_parallel/tensor_shard/constants.py",
    "colossalai/auto_parallel/tensor_shard/initialize.py",
    "colossalai/auto_parallel/tensor_shard/options.py",
    "colossalai/auto_parallel/tensor_shard/sharding_strategy.py",
    "colossalai/auto_parallel/README.md",
    "colossalai/autochunk/autochunk_codegen.py",
    "colossalai/autochunk/estimate_memory.py",
    "colossalai/autochunk/reorder_graph.py",
    "colossalai/autochunk/search_chunk.py",
    "colossalai/autochunk/select_chunk.py",
    "colossalai/autochunk/trace_flow.py",
    "colossalai/autochunk/trace_indice.py",
    "colossalai/autochunk/utils.py",
    "colossalai/booster/mixed_precision/__init__.py",
    "colossalai/booster/mixed_precision/bf16.py",
    "colossalai/booster/mixed_precision/fp16_apex.py",
    "colossalai/booster/mixed_precision/fp16_torch.py",
    "colossalai/booster/mixed_precision/fp8.py",
    "colossalai/booster/mixed_precision/mixed_precision_base.py",
    "colossalai/booster/plugin/__init__.py",
    "colossalai/booster/plugin/gemini_plugin.py",
    "colossalai/booster/plugin/plugin_base.py",
    "colossalai/booster/plugin/torch_ddp_plugin.py",
    "colossalai/booster/__init__.py",
    "colossalai/booster/accelerator.py",
    "colossalai/booster/booster.py",
    "colossalai/builder/__init__.py",
    "colossalai/builder/builder.py",
    "colossalai/checkpoint_io/__init__.py",
    "colossalai/checkpoint_io/checkpoint_io_base.py",
    "colossalai/checkpoint_io/general_checkpoint_io.py",
    "colossalai/checkpoint_io/index_file.py",
    "colossalai/checkpoint_io/utils.py",
    "colossalai/cli/benchmark/__init__.py",
    "colossalai/cli/benchmark/benchmark.py",
    "colossalai/cli/benchmark/models.py",
    "colossalai/cli/benchmark/utils.py",
    "colossalai/cli/check/__init__.py",
    "colossalai/cli/check/check_installation.py",
    "colossalai/cli/launcher/__init__.py",
    "colossalai/cli/launcher/hostinfo.py",
    "colossalai/cli/launcher/multinode_runner.py",
    "colossalai/cli/launcher/run.py",
    "colossalai/cli/__init__.py",
    "colossalai/cli/cli.py",
    "colossalai/cluster/__init__.py",
    "colossalai/cluster/device_mesh_manager.py",
    "colossalai/cluster/dist_coordinator.py",
    "colossalai/cluster/process_group_manager.py",
    "colossalai/communication/__init__.py",
    "colossalai/communication/collective.py",
    "colossalai/communication/p2p_v2.py",
    "colossalai/communication/p2p.py",
    "colossalai/communication/ring.py",
    "colossalai/communication/utils.py",
    "colossalai/context/process_group_initializer/__init__.py",
    "colossalai/context/process_group_initializer/initializer_1d.py",
    "colossalai/context/process_group_initializer/initializer_2d.py",
    "colossalai/context/process_group_initializer/initializer_2p5d.py",
    "colossalai/context/process_group_initializer/initializer_3d.py",
    "colossalai/context/process_group_initializer/initializer_data.py",
    "colossalai/context/process_group_initializer/initializer_model.py",
    "colossalai/context/process_group_initializer/initializer_pipeline.py",
    "colossalai/context/process_group_initializer/initializer_sequence.py",
    "colossalai/context/process_group_initializer/initializer_tensor.py",
    "colossalai/context/process_group_initializer/process_group_initializer.py",
    "colossalai/context/random/__init__.py",
    "colossalai/context/random/_helper.py",
    "colossalai/context/random/seed_manager.py",
    "colossalai/context/__init__.py",
    "colossalai/context/config.py",
    "colossalai/context/moe_context.py",
    "colossalai/context/parallel_context.py",
    "colossalai/context/parallel_mode.py",
    "colossalai/context/singleton_meta.py",
    "colossalai/device/__init__.py",
    "colossalai/device/alpha_beta_profiler.py",
    "colossalai/device/calc_pipeline_strategy.py",
    "colossalai/device/device_mesh.py",
    "colossalai/engine/gradient_accumulation/__init__.py",
    "colossalai/engine/gradient_accumulation/_gradient_accumulation.py",
    "colossalai/engine/gradient_handler/__init__.py",
    "colossalai/engine/gradient_handler/_base_gradient_handler.py",
    "colossalai/engine/gradient_handler/_data_parallel_gradient_handler.py",
    "colossalai/engine/gradient_handler/_moe_gradient_handler.py",
    "colossalai/engine/gradient_handler/_pipeline_parallel_gradient_handler.py",
    "colossalai/engine/gradient_handler/_sequence_parallel_gradient_handler.py",
    "colossalai/engine/gradient_handler/_zero_gradient_handler.py",
    "colossalai/engine/gradient_handler/utils.py",
    "colossalai/engine/schedule/__init__.py",
    "colossalai/engine/schedule/_base_schedule.py",
    "colossalai/engine/schedule/_non_pipeline_schedule.py",
    "colossalai/engine/schedule/_pipeline_schedule_v2.py",
    "colossalai/engine/schedule/_pipeline_schedule.py",
    "colossalai/engine/__init__.py",
    "colossalai/engine/_base_engine.py",
    "colossalai/fx/codegen/__init__.py",
    "colossalai/fx/codegen/activation_checkpoint_codegen.py",
    "colossalai/fx/passes/experimental/adding_shape_consistency_pass.py",
    "colossalai/fx/passes/__init__.py",
    "colossalai/fx/passes/adding_split_node_pass.py",
    "colossalai/fx/passes/concrete_info_prop.py",
    "colossalai/fx/passes/meta_info_prop.py",
    "colossalai/fx/passes/passes_for_gpt2_test.py",
    "colossalai/fx/passes/shard_1d_pass.py",
    "colossalai/fx/passes/split_module.py",
    "colossalai/fx/passes/utils.py",
    "colossalai/fx/profiler/experimental/profiler_function/__init__.py",
    "colossalai/fx/profiler/experimental/profiler_function/activation_function.py",
    "colossalai/fx/profiler/experimental/profiler_function/arithmetic.py",
    "colossalai/fx/profiler/experimental/profiler_function/embedding.py",
    "colossalai/fx/profiler/experimental/profiler_function/linear.py",
    "colossalai/fx/profiler/experimental/profiler_function/normalization.py",
    "colossalai/fx/profiler/experimental/profiler_function/pooling.py",
    "colossalai/fx/profiler/experimental/profiler_function/python_ops.py",
    "colossalai/fx/profiler/experimental/profiler_function/torch_ops.py",
    "colossalai/fx/profiler/experimental/profiler_module/__init__.py",
    "colossalai/fx/profiler/experimental/profiler_module/activation_function.py",
    "colossalai/fx/profiler/experimental/profiler_module/attention.py",
    "colossalai/fx/profiler/experimental/profiler_module/convolution.py",
    "colossalai/fx/profiler/experimental/profiler_module/dropout.py",
    "colossalai/fx/profiler/experimental/profiler_module/embedding.py",
    "colossalai/fx/profiler/experimental/profiler_module/linear.py",
    "colossalai/fx/profiler/experimental/profiler_module/normalization.py",
    "colossalai/fx/profiler/experimental/profiler_module/pooling.py",
    "colossalai/fx/profiler/experimental/profiler_module/rnn.py",
    "colossalai/fx/profiler/experimental/profiler_module/torch_op.py",
    "colossalai/fx/profiler/experimental/__init__.py",
    "colossalai/fx/profiler/experimental/constants.py",
    "colossalai/fx/profiler/experimental/profiler.py",
    "colossalai/fx/profiler/experimental/registry.py",
    "colossalai/fx/profiler/experimental/shard_utils.py",
    "colossalai/fx/profiler/__init__.py",
    "colossalai/fx/profiler/constants.py",
    "colossalai/fx/profiler/dataflow.py",
    "colossalai/fx/profiler/memory_utils.py",
    "colossalai/fx/profiler/opcount.py",
    "colossalai/fx/profiler/profiler.py",
    "colossalai/fx/profiler/shard_utils.py",
    "colossalai/fx/profiler/tensor.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_function/__init__.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_function/addbmm.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_function/addmm.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_function/bias_addition_function.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_function/linear.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_module/__init__.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_module/bias_addition_module.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_module/conv.py",
    "colossalai/fx/tracer/bias_addition_patch/patched_bias_addition_module/linear.py",
    "colossalai/fx/tracer/bias_addition_patch/__init__.py",
    "colossalai/fx/tracer/meta_patch/patched_function/__init__.py",
    "colossalai/fx/tracer/meta_patch/patched_function/activation_function.py",
    "colossalai/fx/tracer/meta_patch/patched_function/arithmetic.py",
    "colossalai/fx/tracer/meta_patch/patched_function/convolution.py",
    "colossalai/fx/tracer/meta_patch/patched_function/embedding.py",
    "colossalai/fx/tracer/meta_patch/patched_function/normalization.py",
    "colossalai/fx/tracer/meta_patch/patched_function/python_ops.py",
    "colossalai/fx/tracer/meta_patch/patched_function/torch_ops.py",
    "colossalai/fx/tracer/meta_patch/patched_module/__init__.py",
    "colossalai/fx/tracer/meta_patch/patched_module/activation_function.py",
    "colossalai/fx/tracer/meta_patch/patched_module/convolution.py",
    "colossalai/fx/tracer/meta_patch/patched_module/embedding.py",
    "colossalai/fx/tracer/meta_patch/patched_module/linear.py",
    "colossalai/fx/tracer/meta_patch/patched_module/normalization.py",
    "colossalai/fx/tracer/meta_patch/patched_module/pooling.py",
    "colossalai/fx/tracer/meta_patch/patched_module/rnn.py",
    "colossalai/fx/tracer/meta_patch/__init__.py",
    "colossalai/fx/tracer/__init__.py",
    "colossalai/fx/tracer/_meta_trace.py",
    "colossalai/fx/tracer/_symbolic_trace.py",
    "colossalai/fx/tracer/_tracer_utils.py",
    "colossalai/fx/tracer/experimental.py",
    "colossalai/fx/tracer/registry.py",
    "colossalai/fx/tracer/tracer.py",
    "colossalai/fx/__init__.py",
    "colossalai/fx/_compatibility.py",
    "colossalai/fx/_meta_regist_12.py",
    "colossalai/fx/_meta_regist_13.py",
    "colossalai/fx/graph_module.py",
    "colossalai/fx/proxy.py",
    "colossalai/interface/__init__.py",
    "colossalai/interface/model.py",
    "colossalai/interface/optimizer.py",
    "colossalai/kernel/cuda_native/csrc/kernels/include/block_reduce.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/context.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/cross_entropy_layer.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/cublas_wrappers.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/cuda_util.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/dropout.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/feed_forward.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/kernels.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/ls_cub.cuh",
    "colossalai/kernel/cuda_native/csrc/kernels/include/normalize_layer.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/softmax.h",
    "colossalai/kernel/cuda_native/csrc/kernels/include/strided_batch_gemm.h",
    "colossalai/kernel/cuda_native/csrc/kernels/cross_entropy.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/cublas_wrappers.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/cuda_util.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/dropout_kernels.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/general_kernels.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/normalize_kernels.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/softmax_kernels.cu",
    "colossalai/kernel/cuda_native/csrc/kernels/transform_kernels.cu",
    "colossalai/kernel/cuda_native/csrc/colossal_C_frontend.cpp",
    "colossalai/kernel/cuda_native/csrc/compat.h",
    "colossalai/kernel/cuda_native/csrc/cpu_adam.cpp",
    "colossalai/kernel/cuda_native/csrc/cpu_adam.h",
    "colossalai/kernel/cuda_native/csrc/layer_norm_cuda_kernel.cu",
    "colossalai/kernel/cuda_native/csrc/layer_norm_cuda.cpp",
    "colossalai/kernel/cuda_native/csrc/moe_cuda_kernel.cu",
    "colossalai/kernel/cuda_native/csrc/moe_cuda.cpp",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_adam.cu",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_apply.cuh",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_l2norm_kernel.cu",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_lamb.cu",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_scale_kernel.cu",
    "colossalai/kernel/cuda_native/csrc/multi_tensor_sgd_kernel.cu",
    "colossalai/kernel/cuda_native/csrc/multihead_attention_1d.cpp",
    "colossalai/kernel/cuda_native/csrc/multihead_attention_1d.h",
    "colossalai/kernel/cuda_native/csrc/scaled_masked_softmax_cuda.cu",
    "colossalai/kernel/cuda_native/csrc/scaled_masked_softmax.cpp",
    "colossalai/kernel/cuda_native/csrc/scaled_masked_softmax.h",
    "colossalai/kernel/cuda_native/csrc/scaled_upper_triang_masked_softmax_cuda.cu",
    "colossalai/kernel/cuda_native/csrc/scaled_upper_triang_masked_softmax.cpp",
    "colossalai/kernel/cuda_native/csrc/scaled_upper_triang_masked_softmax.h",
    "colossalai/kernel/cuda_native/csrc/type_shim.h",
    "colossalai/kernel/cuda_native/__init__.py",
    "colossalai/kernel/cuda_native/flash_attention.py",
    "colossalai/kernel/cuda_native/layer_norm.py",
    "colossalai/kernel/cuda_native/multihead_attention.py",
    "colossalai/kernel/cuda_native/scaled_softmax.py",
    "colossalai/kernel/jit/__init__.py",
    "colossalai/kernel/jit/bias_dropout_add.py",
    "colossalai/kernel/jit/bias_gelu.py",
    "colossalai/kernel/jit/option.py",
    "colossalai/kernel/__init__.py",
    "colossalai/logging/__init__.py",
    "colossalai/logging/logger.py",
    "colossalai/nn/_ops/__init__.py",
    "colossalai/nn/_ops/_utils.py",
    "colossalai/nn/_ops/addmm.py",
    "colossalai/nn/_ops/batch_norm.py",
    "colossalai/nn/_ops/element_wise.py",
    "colossalai/nn/_ops/embedding_bag.py",
    "colossalai/nn/_ops/embedding.py",
    "colossalai/nn/_ops/layernorm.py",
    "colossalai/nn/_ops/linear.py",
    "colossalai/nn/_ops/loss.py",
    "colossalai/nn/_ops/view.py",
    "colossalai/nn/layer/colossalai_layer/__init__.py",
    "colossalai/nn/layer/colossalai_layer/_utils.py",
    "colossalai/nn/layer/colossalai_layer/dropout.py",
    "colossalai/nn/layer/colossalai_layer/embedding.py",
    "colossalai/nn/layer/colossalai_layer/linear.py",
    "colossalai/nn/layer/colossalai_layer/normalization.py",
    "colossalai/nn/layer/moe/__init__.py",
    "colossalai/nn/layer/moe/_operation.py",
    "colossalai/nn/layer/moe/checkpoint.py",
    "colossalai/nn/layer/moe/experts.py",
    "colossalai/nn/layer/moe/layers.py",
    "colossalai/nn/layer/moe/routers.py",
    "colossalai/nn/layer/moe/utils.py",
    "colossalai/nn/layer/parallel_1d/__init__.py",
    "colossalai/nn/layer/parallel_1d/_operation.py",
    "colossalai/nn/layer/parallel_1d/_utils.py",
    "colossalai/nn/layer/parallel_1d/layers.py",
    "colossalai/nn/layer/parallel_2d/__init__.py",
    "colossalai/nn/layer/parallel_2d/_operation.py",
    "colossalai/nn/layer/parallel_2d/_utils.py",
    "colossalai/nn/layer/parallel_2d/layers.py",
    "colossalai/nn/layer/parallel_2p5d/__init__.py",
    "colossalai/nn/layer/parallel_2p5d/_operation.py",
    "colossalai/nn/layer/parallel_2p5d/_utils.py",
    "colossalai/nn/layer/parallel_2p5d/layers.py",
    "colossalai/nn/layer/parallel_3d/__init__.py",
    "colossalai/nn/layer/parallel_3d/_operation.py",
    "colossalai/nn/layer/parallel_3d/_utils.py",
    "colossalai/nn/layer/parallel_3d/layers.py",
    "colossalai/nn/layer/parallel_sequence/__init__.py",
    "colossalai/nn/layer/parallel_sequence/_operation.py",
    "colossalai/nn/layer/parallel_sequence/_utils.py",
    "colossalai/nn/layer/parallel_sequence/layers.py",
    "colossalai/nn/layer/utils/__init__.py",
    "colossalai/nn/layer/utils/common.py",
    "colossalai/nn/layer/vanilla/__init__.py",
    "colossalai/nn/layer/vanilla/layers.py",
    "colossalai/nn/layer/wrapper/__init__.py",
    "colossalai/nn/layer/wrapper/pipeline_wrapper.py",
    "colossalai/nn/layer/__init__.py",
    "colossalai/nn/layer/base_layer.py",
    "colossalai/nn/loss/__init__.py",
    "colossalai/nn/loss/loss_1d.py",
    "colossalai/nn/loss/loss_2d.py",
    "colossalai/nn/loss/loss_2p5d.py",
    "colossalai/nn/loss/loss_3d.py",
    "colossalai/nn/loss/loss_moe.py",
    "colossalai/nn/lr_scheduler/__init__.py",
    "colossalai/nn/lr_scheduler/cosine.py",
    "colossalai/nn/lr_scheduler/delayed.py",
    "colossalai/nn/lr_scheduler/linear.py",
    "colossalai/nn/lr_scheduler/multistep.py",
    "colossalai/nn/lr_scheduler/onecycle.py",
    "colossalai/nn/lr_scheduler/poly.py",
    "colossalai/nn/lr_scheduler/torch.py",
    "colossalai/nn/metric/__init__.py",
    "colossalai/nn/metric/_utils.py",
    "colossalai/nn/metric/accuracy_2d.py",
    "colossalai/nn/metric/accuracy_2p5d.py",
    "colossalai/nn/metric/accuracy_3d.py",
    "colossalai/nn/optimizer/__init__.py",
    "colossalai/nn/optimizer/colossalai_optimizer.py",
    "colossalai/nn/optimizer/cpu_adam.py",
    "colossalai/nn/optimizer/fused_adam.py",
    "colossalai/nn/optimizer/fused_lamb.py",
    "colossalai/nn/optimizer/fused_sgd.py",
    "colossalai/nn/optimizer/hybrid_adam.py",
    "colossalai/nn/optimizer/lamb.py",
    "colossalai/nn/optimizer/lars.py",
    "colossalai/nn/optimizer/nvme_optimizer.py",
    "colossalai/nn/optimizer/README.md",
    "colossalai/nn/parallel/layers/cache_embedding/__init__.py",
    "colossalai/nn/parallel/layers/cache_embedding/base_embedding.py",
    "colossalai/nn/parallel/layers/cache_embedding/cache_mgr.py",
    "colossalai/nn/parallel/layers/cache_embedding/cached_embedding.py",
    "colossalai/nn/parallel/layers/cache_embedding/copyer.py",
    "colossalai/nn/parallel/layers/cache_embedding/embedding_config.py",
    "colossalai/nn/parallel/layers/cache_embedding/parallel_cached_embedding_tablewise_split_cache.py",
    "colossalai/nn/parallel/layers/cache_embedding/parallel_cached_embedding_tablewise.py",
    "colossalai/nn/parallel/layers/cache_embedding/parallel_cached_embedding.py",
    "colossalai/nn/parallel/layers/__init__.py",
    "colossalai/nn/parallel/layers/colo_module.py",
    "colossalai/nn/parallel/layers/embedding.py",
    "colossalai/nn/parallel/layers/linear.py",
    "colossalai/nn/parallel/layers/module_utils.py",
    "colossalai/nn/parallel/__init__.py",
    "colossalai/nn/parallel/data_parallel.py",
    "colossalai/nn/parallel/reducer.py",
    "colossalai/nn/__init__.py",
    "colossalai/nn/init.py",
    "colossalai/pipeline/middleware/adaptor/__init__.py",
    "colossalai/pipeline/middleware/adaptor/fx.py",
    "colossalai/pipeline/middleware/__init__.py",
    "colossalai/pipeline/middleware/topo.py",
    "colossalai/pipeline/rpc/__init__.py",
    "colossalai/pipeline/rpc/_pipeline_base.py",
    "colossalai/pipeline/rpc/_pipeline_schedule.py",
    "colossalai/pipeline/rpc/utils.py",
    "colossalai/pipeline/__init__.py",
    "colossalai/pipeline/layer_spec.py",
    "colossalai/pipeline/pipelinable.py",
    "colossalai/pipeline/pipeline_process_group.py",
    "colossalai/pipeline/utils.py",
    "colossalai/registry/__init__.py",
    "colossalai/registry/registry.py",
    "colossalai/tensor/d_tensor/comm_spec.py",
    "colossalai/tensor/d_tensor/d_tensor.py",
    "colossalai/tensor/d_tensor/layout_converter.py",
    "colossalai/tensor/d_tensor/layout.py",
    "colossalai/tensor/d_tensor/misc.py",
    "colossalai/tensor/d_tensor/sharding_spec.py",
    "colossalai/tensor/d_tensor/utils.py",
    "colossalai/tensor/__init__.py",
    "colossalai/tensor/colo_parameter.py",
    "colossalai/tensor/colo_tensor.py",
    "colossalai/tensor/comm_spec.py",
    "colossalai/tensor/compute_spec.py",
    "colossalai/tensor/const.py",
    "colossalai/tensor/dist_spec_mgr.py",
    "colossalai/tensor/distspec.py",
    "colossalai/tensor/op_wrapper.py",
    "colossalai/tensor/param_op_hook.py",
    "colossalai/tensor/process_group.py",
    "colossalai/tensor/shape_consistency.py",
    "colossalai/tensor/sharding_spec.py",
    "colossalai/tensor/tensor_spec.py",
    "colossalai/tensor/utils.py",
    "colossalai/testing/__init__.py",
    "colossalai/testing/comparison.py",
    "colossalai/testing/pytest_wrapper.py",
    "colossalai/testing/random.py",
    "colossalai/testing/utils.py",
    "colossalai/trainer/hooks/__init__.py",
    "colossalai/trainer/hooks/_base_hook.py",
    "colossalai/trainer/hooks/_checkpoint_hook.py",
    "colossalai/trainer/hooks/_commons_.py",
    "colossalai/trainer/hooks/_log_hook.py",
    "colossalai/trainer/hooks/_lr_scheduler_hook.py",
    "colossalai/trainer/hooks/_metric_hook.py",
    "colossalai/trainer/__init__.py",
    "colossalai/trainer/_trainer.py",
    "colossalai/utils/checkpoint/__init__.py",
    "colossalai/utils/checkpoint/module_checkpoint.py",
    "colossalai/utils/checkpoint/utils.py",
    "colossalai/utils/checkpoint_io/__init__.py",
    "colossalai/utils/checkpoint_io/backend.py",
    "colossalai/utils/checkpoint_io/constant.py",
    "colossalai/utils/checkpoint_io/convertor.py",
    "colossalai/utils/checkpoint_io/distributed.py",
    "colossalai/utils/checkpoint_io/io.py",
    "colossalai/utils/checkpoint_io/meta.py",
    "colossalai/utils/checkpoint_io/reader.py",
    "colossalai/utils/checkpoint_io/utils.py",
    "colossalai/utils/checkpoint_io/writer.py",
    "colossalai/utils/data_sampler/__init__.py",
    "colossalai/utils/data_sampler/base_sampler.py",
    "colossalai/utils/data_sampler/data_parallel_sampler.py",
    "colossalai/utils/model/experimental.py",
    "colossalai/utils/model/lazy_init_context.py",
    "colossalai/utils/model/utils.py",
    "colossalai/utils/multi_tensor_apply/__init__.py",
    "colossalai/utils/multi_tensor_apply/multi_tensor_apply.py",
    "colossalai/utils/profiler/legacy/__init__.py",
    "colossalai/utils/profiler/legacy/comm_profiler.py",
    "colossalai/utils/profiler/legacy/pcie_profiler.py",
    "colossalai/utils/profiler/legacy/prof_utils.py",
    "colossalai/utils/profiler/__init__.py",
    "colossalai/utils/profiler/extention.py",
    "colossalai/utils/profiler/profiler.py",
    "colossalai/utils/profiler/stateful_tensor_mem_extention.py",
    "colossalai/utils/rank_recorder/__init__.py",
    "colossalai/utils/rank_recorder/rank_recorder.py",
    "colossalai/utils/rank_recorder/README.md",
    "colossalai/utils/tensor_detector/__init__.py",
    "colossalai/utils/tensor_detector/readme.md",
    "colossalai/utils/tensor_detector/tensor_detector.py",
    "colossalai/utils/__init__.py",
    "colossalai/utils/activation_checkpoint.py",
    "colossalai/utils/checkpointing.py",
    "colossalai/utils/common.py",
    "colossalai/utils/cuda.py",
    "colossalai/utils/memory.py",
    "colossalai/utils/moe.py",
    "colossalai/utils/timer.py",
    "colossalai/zero/gemini/chunk/__init__.py",
    "colossalai/zero/gemini/chunk/chunk.py",
    "colossalai/zero/gemini/chunk/manager.py",
    "colossalai/zero/gemini/chunk/search_utils.py",
    "colossalai/zero/gemini/chunk/utils.py",
    "colossalai/zero/gemini/memory_tracer/__init__.py",
    "colossalai/zero/gemini/memory_tracer/chunk_memstats_collector.py",
    "colossalai/zero/gemini/memory_tracer/memory_monitor.py",
    "colossalai/zero/gemini/memory_tracer/memory_stats.py",
    "colossalai/zero/gemini/memory_tracer/memstats_collector.py",
    "colossalai/zero/gemini/memory_tracer/param_runtime_order.py",
    "colossalai/zero/gemini/memory_tracer/runtime_mem_tracer.py",
    "colossalai/zero/gemini/memory_tracer/static_memstats_collector.py",
    "colossalai/zero/gemini/memory_tracer/utils.py",
    "colossalai/zero/gemini/__init__.py",
    "colossalai/zero/gemini/colo_init_context.py",
    "colossalai/zero/gemini/gemini_ddp.py",
    "colossalai/zero/gemini/gemini_hook.py",
    "colossalai/zero/gemini/gemini_mgr.py",
    "colossalai/zero/gemini/gemini_optimizer.py",
    "colossalai/zero/gemini/placement_policy.py",
    "colossalai/zero/gemini/utils.py",
    "colossalai/zero/legacy/gemini/ophooks/__init__.py",
    "colossalai/zero/legacy/gemini/ophooks/_shard_grad_ophook.py",
    "colossalai/zero/legacy/gemini/ophooks/_shard_param_ophook.py",
    "colossalai/zero/legacy/gemini/ophooks/runtime_mem_tracer_hook.py",
    "colossalai/zero/legacy/gemini/ophooks/utils.py",
    "colossalai/zero/legacy/gemini/paramhooks/__init__.py",
    "colossalai/zero/legacy/gemini/paramhooks/_param_hookmgr.py",
    "colossalai/zero/legacy/gemini/__init__.py",
    "colossalai/zero/legacy/gemini/gemini_context.py",
    "colossalai/zero/legacy/gemini/stateful_tensor_mgr.py",
    "colossalai/zero/legacy/gemini/stateful_tensor.py",
    "colossalai/zero/legacy/gemini/tensor_placement_policy.py",
    "colossalai/zero/legacy/gemini/tensor_utils.py",
    "colossalai/zero/legacy/init_ctx/__init__.py",
    "colossalai/zero/legacy/init_ctx/init_context.py",
    "colossalai/zero/legacy/shard_utils/__init__.py",
    "colossalai/zero/legacy/shard_utils/base_shard_strategy.py",
    "colossalai/zero/legacy/shard_utils/bucket_tensor_shard_strategy.py",
    "colossalai/zero/legacy/shard_utils/commons.py",
    "colossalai/zero/legacy/shard_utils/tensor_shard_strategy.py",
    "colossalai/zero/legacy/sharded_model/__init__.py",
    "colossalai/zero/legacy/sharded_model/_utils.py",
    "colossalai/zero/legacy/sharded_model/reduce_scatter.py",
    "colossalai/zero/legacy/sharded_model/sharded_model_v2.py",
    "colossalai/zero/legacy/sharded_model/utils.py",
    "colossalai/zero/legacy/sharded_model/zero_hook.py",
    "colossalai/zero/legacy/sharded_optim/__init__.py",
    "colossalai/zero/legacy/sharded_optim/sharded_optim_v2.py",
    "colossalai/zero/legacy/sharded_param/__init__.py",
    "colossalai/zero/legacy/sharded_param/sharded_param.py",
    "colossalai/zero/legacy/sharded_param/sharded_tensor.py",
    "colossalai/zero/legacy/__init__.py",
    "colossalai/zero/low_level/bookkeeping/__init__.py",
    "colossalai/zero/low_level/bookkeeping/base_store.py",
    "colossalai/zero/low_level/bookkeeping/bucket_store.py",
    "colossalai/zero/low_level/bookkeeping/gradient_store.py",
    "colossalai/zero/low_level/bookkeeping/parameter_store.py",
    "colossalai/zero/low_level/bookkeeping/tensor_bucket.py",
    "colossalai/zero/low_level/__init__.py",
    "colossalai/zero/low_level/_utils.py",
    "colossalai/zero/low_level/low_level_optim.py",
    "colossalai/zero/__init__.py",
    "colossalai/zero/wrapper.py",
    "colossalai/__init__.py",
    "colossalai/constants.py",
    "colossalai/core.py",
    "colossalai/global_variables.py",
    "colossalai/initialize.py",
    "docker/Dockerfile",
    "docs/source/en/advanced_tutorials/add_your_parallel.md",
    "docs/source/en/advanced_tutorials/define_your_own_parallel_model.md",
    "docs/source/en/advanced_tutorials/integrate_mixture_of_experts_into_your_model.md",
    "docs/source/en/advanced_tutorials/meet_gemini.md",
    "docs/source/en/advanced_tutorials/opt_service.md",
    "docs/source/en/advanced_tutorials/parallelize_your_training_like_Megatron.md",
    "docs/source/en/advanced_tutorials/train_gpt_using_hybrid_parallelism.md",
    "docs/source/en/advanced_tutorials/train_vit_using_pipeline_parallelism.md",
    "docs/source/en/advanced_tutorials/train_vit_with_hybrid_parallelism.md",
    "docs/source/en/basics/colotensor_concept.md",
    "docs/source/en/basics/command_line_tool.md",
    "docs/source/en/basics/configure_parallelization.md",
    "docs/source/en/basics/define_your_config.md",
    "docs/source/en/basics/engine_trainer.md",
    "docs/source/en/basics/initialize_features.md",
    "docs/source/en/basics/launch_colossalai.md",
    "docs/source/en/basics/model_checkpoint.md",
    "docs/source/en/Colossal-Auto/feature/layout_converting_management.md",
    "docs/source/en/Colossal-Auto/get_started/installation.md",
    "docs/source/en/Colossal-Auto/get_started/introduction.md",
    "docs/source/en/Colossal-Auto/get_started/run_demo.md",
    "docs/source/en/concepts/colossalai_overview.md",
    "docs/source/en/concepts/distributed_training.md",
    "docs/source/en/concepts/paradigms_of_parallelism.md",
    "docs/source/en/features/1D_tensor_parallel.md",
    "docs/source/en/features/2D_tensor_parallel.md",
    "docs/source/en/features/2p5D_tensor_parallel.md",
    "docs/source/en/features/3D_tensor_parallel.md",
    "docs/source/en/features/gradient_accumulation.md",
    "docs/source/en/features/gradient_clipping.md",
    "docs/source/en/features/gradient_handler.md",
    "docs/source/en/features/mixed_precision_training.md",
    "docs/source/en/features/nvme_offload.md",
    "docs/source/en/features/pipeline_parallel.md",
    "docs/source/en/features/zero_with_chunk.md",
    "docs/source/en/get_started/installation.md",
    "docs/source/en/get_started/reading_roadmap.md",
    "docs/source/en/get_started/run_demo.md",
    "docs/source/en/sidebar_category_translation.json",
    "docs/source/zh-Hans/advanced_tutorials/add_your_parallel.md",
    "docs/source/zh-Hans/advanced_tutorials/define_your_own_parallel_model.md",
    "docs/source/zh-Hans/advanced_tutorials/integrate_mixture_of_experts_into_your_model.md",
    "docs/source/zh-Hans/advanced_tutorials/meet_gemini.md",
    "docs/source/zh-Hans/advanced_tutorials/opt_service.md",
    "docs/source/zh-Hans/advanced_tutorials/parallelize_your_training_like_Megatron.md",
    "docs/source/zh-Hans/advanced_tutorials/train_gpt_using_hybrid_parallelism.md",
    "docs/source/zh-Hans/advanced_tutorials/train_vit_using_pipeline_parallelism.md",
    "docs/source/zh-Hans/advanced_tutorials/train_vit_with_hybrid_parallelism.md",
    "docs/source/zh-Hans/basics/colotensor_concept.md",
    "docs/source/zh-Hans/basics/command_line_tool.md",
    "docs/source/zh-Hans/basics/configure_parallelization.md",
    "docs/source/zh-Hans/basics/define_your_config.md",
    "docs/source/zh-Hans/basics/engine_trainer.md",
    "docs/source/zh-Hans/basics/initialize_features.md",
    "docs/source/zh-Hans/basics/launch_colossalai.md",
    "docs/source/zh-Hans/basics/model_checkpoint.md",
    "docs/source/zh-Hans/Colossal-Auto/feature/layout_converting_management.md",
    "docs/source/zh-Hans/Colossal-Auto/get_started/installation.md",
    "docs/source/zh-Hans/Colossal-Auto/get_started/introduction.md",
    "docs/source/zh-Hans/Colossal-Auto/get_started/run_demo.md",
    "docs/source/zh-Hans/concepts/colossalai_overview.md",
    "docs/source/zh-Hans/concepts/distributed_training.md",
    "docs/source/zh-Hans/concepts/paradigms_of_parallelism.md",
    "docs/source/zh-Hans/features/1D_tensor_parallel.md",
    "docs/source/zh-Hans/features/2D_tensor_parallel.md",
    "docs/source/zh-Hans/features/2p5D_tensor_parallel.md",
    "docs/source/zh-Hans/features/3D_tensor_parallel.md",
    "docs/source/zh-Hans/features/gradient_accumulation.md",
    "docs/source/zh-Hans/features/gradient_clipping.md",
    "docs/source/zh-Hans/features/gradient_handler.md",
    "docs/source/zh-Hans/features/mixed_precision_training.md",
    "docs/source/zh-Hans/features/nvme_offload.md",
    "docs/source/zh-Hans/features/pipeline_parallel.md",
    "docs/source/zh-Hans/features/zero_with_chunk.md",
    "docs/source/zh-Hans/get_started/installation.md",
    "docs/source/zh-Hans/get_started/reading_roadmap.md",
    "docs/source/zh-Hans/get_started/run_demo.md",
    "docs/source/zh-Hans/sidebar_category_translation.json",
    "examples/community/fp8/mnist/main.py",
    "examples/community/fp8/mnist/README.md",
    "examples/community/roberta/preprocessing/get_mask.py",
    "examples/community/roberta/preprocessing/Makefile",
    "examples/community/roberta/preprocessing/mask.cpp",
    "examples/community/roberta/preprocessing/README.md",
    "examples/community/roberta/preprocessing/sentence_split.py",
    "examples/community/roberta/preprocessing/tokenize_mask.py",
    "examples/community/roberta/pretraining/model/bert.py",
    "examples/community/roberta/pretraining/model/deberta_v2.py",
    "examples/community/roberta/pretraining/utils/exp_util.py",
    "examples/community/roberta/pretraining/utils/global_vars.py",
    "examples/community/roberta/pretraining/utils/logger.py",
    "examples/community/roberta/pretraining/utils/WandbLog.py",
    "examples/community/roberta/pretraining/arguments.py",
    "examples/community/roberta/pretraining/bert_dataset_provider.py",
    "examples/community/roberta/pretraining/evaluation.py",
    "examples/community/roberta/pretraining/hostfile",
    "examples/community/roberta/pretraining/loss.py",
    "examples/community/roberta/pretraining/nvidia_bert_dataset_provider.py",
    "examples/community/roberta/pretraining/pretrain_utils.py",
    "examples/community/roberta/pretraining/README.md",
    "examples/community/roberta/pretraining/run_pretrain_resume.sh",
    "examples/community/roberta/pretraining/run_pretrain.sh",
    "examples/community/roberta/pretraining/run_pretraining.py",
    "examples/community/roberta/README.md",
    "examples/community/roberta/requirements.txt",
    "examples/community/README.md",
    "examples/images/diffusion/configs/Inference/v2-inference-v.yaml",
    "examples/images/diffusion/configs/Inference/v2-inference.yaml",
    "examples/images/diffusion/configs/Inference/v2-inpainting-inference.yaml",
    "examples/images/diffusion/configs/Inference/v2-midas-inference.yaml",
    "examples/images/diffusion/configs/Inference/x4-upscaling.yaml",
    "examples/images/diffusion/configs/Teyvat/README.md",
    "examples/images/diffusion/configs/Teyvat/train_colossalai_teyvat.yaml",
    "examples/images/diffusion/configs/train_colossalai_cifar10.yaml",
    "examples/images/diffusion/configs/train_colossalai.yaml",
    "examples/images/diffusion/configs/train_ddp.yaml",
    "examples/images/diffusion/docker/Dockerfile",
    "examples/images/diffusion/ldm/data/base.py",
    "examples/images/diffusion/ldm/data/cifar10.py",
    "examples/images/diffusion/ldm/data/imagenet.py",
    "examples/images/diffusion/ldm/data/lsun.py",
    "examples/images/diffusion/ldm/data/teyvat.py",
    "examples/images/diffusion/ldm/models/diffusion/dpm_solver/__init__.py",
    "examples/images/diffusion/ldm/models/diffusion/dpm_solver/dpm_solver.py",
    "examples/images/diffusion/ldm/models/diffusion/dpm_solver/sampler.py",
    "examples/images/diffusion/ldm/models/diffusion/classifier.py",
    "examples/images/diffusion/ldm/models/diffusion/ddim.py",
    "examples/images/diffusion/ldm/models/diffusion/ddpm.py",
    "examples/images/diffusion/ldm/models/diffusion/plms.py",
    "examples/images/diffusion/ldm/models/diffusion/sampling_util.py",
    "examples/images/diffusion/ldm/models/autoencoder.py",
    "examples/images/diffusion/ldm/modules/diffusionmodules/model.py",
    "examples/images/diffusion/ldm/modules/diffusionmodules/openaimodel.py",
    "examples/images/diffusion/ldm/modules/diffusionmodules/upscaling.py",
    "examples/images/diffusion/ldm/modules/diffusionmodules/util.py",
    "examples/images/diffusion/ldm/modules/distributions/distributions.py",
    "examples/images/diffusion/ldm/modules/encoders/modules.py",
    "examples/images/diffusion/ldm/modules/image_degradation/__init__.py",
    "examples/images/diffusion/ldm/modules/image_degradation/bsrgan_light.py",
    "examples/images/diffusion/ldm/modules/image_degradation/bsrgan.py",
    "examples/images/diffusion/ldm/modules/image_degradation/utils_image.py",
    "examples/images/diffusion/ldm/modules/midas/midas/base_model.py",
    "examples/images/diffusion/ldm/modules/midas/midas/blocks.py",
    "examples/images/diffusion/ldm/modules/midas/midas/dpt_depth.py",
    "examples/images/diffusion/ldm/modules/midas/midas/midas_net_custom.py",
    "examples/images/diffusion/ldm/modules/midas/midas/midas_net.py",
    "examples/images/diffusion/ldm/modules/midas/midas/transforms.py",
    "examples/images/diffusion/ldm/modules/midas/midas/vit.py",
    "examples/images/diffusion/ldm/modules/midas/api.py",
    "examples/images/diffusion/ldm/modules/midas/utils.py",
    "examples/images/diffusion/ldm/modules/attention.py",
    "examples/images/diffusion/ldm/modules/ema.py",
    "examples/images/diffusion/ldm/lr_scheduler.py",
    "examples/images/diffusion/ldm/util.py",
    "examples/images/diffusion/scripts/tests/test_checkpoint.py",
    "examples/images/diffusion/scripts/tests/test_watermark.py",
    "examples/images/diffusion/scripts/download_first_stages.sh",
    "examples/images/diffusion/scripts/download_models.sh",
    "examples/images/diffusion/scripts/img2img.py",
    "examples/images/diffusion/scripts/inpaint.py",
    "examples/images/diffusion/scripts/knn2img.py",
    "examples/images/diffusion/scripts/sample_diffusion.py",
    "examples/images/diffusion/scripts/train_searcher.py",
    "examples/images/diffusion/scripts/txt2img.py",
    "examples/images/diffusion/scripts/txt2img.sh",
    "examples/images/diffusion/scripts/utils.py",
    "examples/images/diffusion/environment.yaml",
    "examples/images/diffusion/LICENSE",
    "examples/images/diffusion/main.py",
    "examples/images/diffusion/README.md",
    "examples/images/diffusion/requirements.txt",
    "examples/images/diffusion/setup.py",
    "examples/images/diffusion/test_ci.sh",
    "examples/images/diffusion/train_colossalai.sh",
    "examples/images/diffusion/train_ddp.sh",
    "examples/images/dreambooth/colossalai.sh",
    "examples/images/dreambooth/debug.py",
    "examples/images/dreambooth/dreambooth.sh",
    "examples/images/dreambooth/inference.py",
    "examples/images/dreambooth/README.md",
    "examples/images/dreambooth/requirements.txt",
    "examples/images/dreambooth/train_dreambooth_colossalai_lora.py",
    "examples/images/dreambooth/train_dreambooth_colossalai.py",
    "examples/images/dreambooth/train_dreambooth_inpaint.py",
    "examples/images/dreambooth/train_dreambooth.py",
    "examples/images/vit/configs/vit_1d_tp2_ci.py",
    "examples/images/vit/configs/vit_1d_tp2.py",
    "examples/images/vit/README.md",
    "examples/images/vit/requirements.txt",
    "examples/images/vit/run.sh",
    "examples/images/vit/test_ci.sh",
    "examples/images/vit/test_vit.py",
    "examples/images/vit/train.py",
    "examples/images/vit/vit.py",
    "examples/language/bert/run_gemini.sh",
    "examples/language/bert/test_ci.sh",
    "examples/language/bert/train_bert_demo.py",
    "examples/language/commons/utils.py",
    "examples/language/gpt/experiments/auto_offload/model_zoo.py",
    "examples/language/gpt/experiments/auto_offload/README.md",
    "examples/language/gpt/experiments/auto_offload/requirements.txt",
    "examples/language/gpt/experiments/auto_offload/run.sh",
    "examples/language/gpt/experiments/auto_offload/train_gpt_offload.py",
    "examples/language/gpt/experiments/auto_parallel/auto_parallel_with_gpt.py",
    "examples/language/gpt/experiments/auto_parallel/gpt_modules.py",
    "examples/language/gpt/experiments/auto_parallel/README.md",
    "examples/language/gpt/experiments/auto_parallel/requirements.txt",
    "examples/language/gpt/experiments/pipeline_parallel/model_zoo.py",
    "examples/language/gpt/experiments/pipeline_parallel/README.md",
    "examples/language/gpt/experiments/pipeline_parallel/requirements.txt",
    "examples/language/gpt/experiments/pipeline_parallel/run.sh",
    "examples/language/gpt/experiments/pipeline_parallel/train_gpt_pp.py",
    "examples/language/gpt/gemini/commons/model_zoo.py",
    "examples/language/gpt/gemini/commons/utils.py",
    "examples/language/gpt/gemini/benchmark_gemini.sh",
    "examples/language/gpt/gemini/requirements.txt",
    "examples/language/gpt/gemini/run_gemini.sh",
    "examples/language/gpt/gemini/test_ci.sh",
    "examples/language/gpt/gemini/train_gpt_demo.py",
    "examples/language/gpt/titans/configs/gpt2_small_zero3_pp1d.py",
    "examples/language/gpt/titans/configs/gpt3_zero3_pp1d.py",
    "examples/language/gpt/titans/dataset/webtext.py",
    "examples/language/gpt/titans/model/__init__.py",
    "examples/language/gpt/titans/model/embed.py",
    "examples/language/gpt/titans/model/gpt1d.py",
    "examples/language/gpt/titans/model/pipeline_gpt1d.py",
    "examples/language/gpt/titans/LICENSE",
    "examples/language/gpt/titans/README.md",
    "examples/language/gpt/titans/requirements.txt",
    "examples/language/gpt/titans/run.sh",
    "examples/language/gpt/titans/test_ci.sh",
    "examples/language/gpt/titans/train_gpt.py",
    "examples/language/gpt/README.md",
    "examples/language/gpt/requirements.txt",
    "examples/language/gpt/test_ci.sh",
    "examples/language/opt/benchmark.sh",
    "examples/language/opt/README.md",
    "examples/language/opt/requirements.txt",
    "examples/language/opt/run_gemini.sh",
    "examples/language/opt/test_ci.sh",
    "examples/language/opt/train_gemini_opt.py",
    "examples/language/palm/data/README.md",
    "examples/language/palm/palm_pytorch/__init__.py",
    "examples/language/palm/palm_pytorch/autoregressive_wrapper.py",
    "examples/language/palm/palm_pytorch/palm_pytorch.py",
    "examples/language/palm/README.md",
    "examples/language/palm/requirements.txt",
    "examples/language/palm/run.sh",
    "examples/language/palm/test_ci.sh",
    "examples/language/palm/train.py",
    "examples/tutorial/auto_parallel/auto_ckpt_batchsize_test.py",
    "examples/tutorial/auto_parallel/auto_ckpt_solver_test.py",
    "examples/tutorial/auto_parallel/auto_parallel_with_resnet.py",
    "examples/tutorial/auto_parallel/bench_utils.py",
    "examples/tutorial/auto_parallel/config.py",
    "examples/tutorial/auto_parallel/README.md",
    "examples/tutorial/auto_parallel/requirements.txt",
    "examples/tutorial/auto_parallel/setup.py",
    "examples/tutorial/auto_parallel/test_ci.sh",
    "examples/tutorial/fastfold/README.md",
    "examples/tutorial/hybrid_parallel/config.py",
    "examples/tutorial/hybrid_parallel/README.md",
    "examples/tutorial/hybrid_parallel/requirements.txt",
    "examples/tutorial/hybrid_parallel/test_ci.sh",
    "examples/tutorial/hybrid_parallel/train.py",
    "examples/tutorial/large_batch_optimizer/config.py",
    "examples/tutorial/large_batch_optimizer/README.md",
    "examples/tutorial/large_batch_optimizer/requirements.txt",
    "examples/tutorial/large_batch_optimizer/test_ci.sh",
    "examples/tutorial/large_batch_optimizer/train.py",
    "examples/tutorial/new_api/torch_ddp/.gitignore",
    "examples/tutorial/new_api/torch_ddp/eval.py",
    "examples/tutorial/new_api/torch_ddp/README.md",
    "examples/tutorial/new_api/torch_ddp/train.py",
    "examples/tutorial/new_api/README.md",
    "examples/tutorial/new_api/test_ci.sh",
    "examples/tutorial/opt/inference/benchmark/locustfile.py",
    "examples/tutorial/opt/inference/script/process-opt-175b/convert_ckpt.py",
    "examples/tutorial/opt/inference/script/process-opt-175b/flat-meta.json",
    "examples/tutorial/opt/inference/script/process-opt-175b/README.md",
    "examples/tutorial/opt/inference/script/process-opt-175b/unflat.sh",
    "examples/tutorial/opt/inference/script/processing_ckpt_66b.py",
    "examples/tutorial/opt/inference/batch.py",
    "examples/tutorial/opt/inference/cache.py",
    "examples/tutorial/opt/inference/opt_fastapi.py",
    "examples/tutorial/opt/inference/opt_server.py",
    "examples/tutorial/opt/inference/README.md",
    "examples/tutorial/opt/inference/requirements.txt",
    "examples/tutorial/opt/opt/benchmark.sh",
    "examples/tutorial/opt/opt/colossalai_zero.py",
    "examples/tutorial/opt/opt/context.py",
    "examples/tutorial/opt/opt/README.md",
    "examples/tutorial/opt/opt/requirements.txt",
    "examples/tutorial/opt/opt/run_clm_synthetic.sh",
    "examples/tutorial/opt/opt/run_clm.py",
    "examples/tutorial/opt/opt/run_clm.sh",
    "examples/tutorial/opt/opt/test_ci.sh",
    "examples/tutorial/opt/test_ci.sh",
    "examples/tutorial/sequence_parallel/data/datasets/test/test_indexed_dataset.py",
    "examples/tutorial/sequence_parallel/data/datasets/test/test_preprocess_data.sh",
    "examples/tutorial/sequence_parallel/data/datasets/__init__.py",
    "examples/tutorial/sequence_parallel/data/datasets/bert_dataset.py",
    "examples/tutorial/sequence_parallel/data/datasets/blendable_dataset.py",
    "examples/tutorial/sequence_parallel/data/datasets/builder.py",
    "examples/tutorial/sequence_parallel/data/datasets/data_samplers.py",
    "examples/tutorial/sequence_parallel/data/datasets/dataset_utils.py",
    "examples/tutorial/sequence_parallel/data/datasets/helpers.cpp",
    "examples/tutorial/sequence_parallel/data/datasets/ict_dataset.py",
    "examples/tutorial/sequence_parallel/data/datasets/indexed_dataset.py",
    "examples/tutorial/sequence_parallel/data/datasets/Makefile",
    "examples/tutorial/sequence_parallel/data/tokenizer/__init__.py",
    "examples/tutorial/sequence_parallel/data/tokenizer/bert_tokenization.py",
    "examples/tutorial/sequence_parallel/data/tokenizer/tokenizer.py",
    "examples/tutorial/sequence_parallel/data/__init__.py",
    "examples/tutorial/sequence_parallel/data/bert_helper.py",
    "examples/tutorial/sequence_parallel/data/dummy_dataloader.py",
    "examples/tutorial/sequence_parallel/loss_func/bert_loss.py",
    "examples/tutorial/sequence_parallel/loss_func/cross_entropy.py",
    "examples/tutorial/sequence_parallel/loss_func/utils.py",
    "examples/tutorial/sequence_parallel/lr_scheduler/__init__.py",
    "examples/tutorial/sequence_parallel/lr_scheduler/annealing_lr.py",
    "examples/tutorial/sequence_parallel/model/layers/__init__.py",
    "examples/tutorial/sequence_parallel/model/layers/bert_layer.py",
    "examples/tutorial/sequence_parallel/model/layers/dropout.py",
    "examples/tutorial/sequence_parallel/model/layers/embedding.py",
    "examples/tutorial/sequence_parallel/model/layers/head.py",
    "examples/tutorial/sequence_parallel/model/layers/init_method.py",
    "examples/tutorial/sequence_parallel/model/layers/linear.py",
    "examples/tutorial/sequence_parallel/model/layers/mlp.py",
    "examples/tutorial/sequence_parallel/model/layers/pooler.py",
    "examples/tutorial/sequence_parallel/model/layers/preprocess.py",
    "examples/tutorial/sequence_parallel/model/__init__.py",
    "examples/tutorial/sequence_parallel/model/bert.py",
    "examples/tutorial/sequence_parallel/config.py",
    "examples/tutorial/sequence_parallel/README.md",
    "examples/tutorial/sequence_parallel/requirements.txt",
    "examples/tutorial/sequence_parallel/test_ci.sh",
    "examples/tutorial/sequence_parallel/train.py",
    "examples/tutorial/.gitignore",
    "examples/tutorial/download_cifar10.py",
    "examples/tutorial/README.md",
    "examples/tutorial/requirements.txt",
    "op_builder/__init__.py",
    "op_builder/builder.py",
    "op_builder/cpu_adam.py",
    "op_builder/fused_optim.py",
    "op_builder/layernorm.py",
    "op_builder/moe.py",
    "op_builder/multi_head_attn.py",
    "op_builder/README.md",
    "op_builder/scaled_masked_softmax.py",
    "op_builder/scaled_upper_triangle_masked_softmax.py",
    "op_builder/utils.py",
    "requirements/requirements-test.txt",
    "requirements/requirements.txt",
    "tests/components_to_test/utils/__init__.py",
    "tests/components_to_test/utils/dummy_data_generator.py",
    "tests/components_to_test/utils/executor.py",
    "tests/components_to_test/__init__.py",
    "tests/components_to_test/albert.py",
    "tests/components_to_test/beit.py",
    "tests/components_to_test/bert.py",
    "tests/components_to_test/gpt2.py",
    "tests/components_to_test/hanging_param_model.py",
    "tests/components_to_test/inline_op_model.py",
    "tests/components_to_test/nested_model.py",
    "tests/components_to_test/registry.py",
    "tests/components_to_test/repeated_computed_layers.py",
    "tests/components_to_test/resnet.py",
    "tests/components_to_test/simple_net.py",
    "tests/kit/model_zoo/diffusers/__init__.py",
    "tests/kit/model_zoo/diffusers/diffusers.py",
    "tests/kit/model_zoo/timm/__init__.py",
    "tests/kit/model_zoo/timm/timm.py",
    "tests/kit/model_zoo/torchaudio/__init__.py",
    "tests/kit/model_zoo/torchaudio/torchaudio.py",
    "tests/kit/model_zoo/torchrec/__init__.py",
    "tests/kit/model_zoo/torchrec/torchrec.py",
    "tests/kit/model_zoo/torchvision/__init__.py",
    "tests/kit/model_zoo/torchvision/torchvision.py",
    "tests/kit/model_zoo/transformers/__init__.py",
    "tests/kit/model_zoo/transformers/albert.py",
    "tests/kit/model_zoo/transformers/bert.py",
    "tests/kit/model_zoo/transformers/gpt.py",
    "tests/kit/model_zoo/transformers/opt.py",
    "tests/kit/model_zoo/transformers/t5.py",
    "tests/kit/model_zoo/__init__.py",
    "tests/kit/model_zoo/registry.py",
    "tests/test_amp/test_naive_fp16.py",
    "tests/test_amp/test_torch_fp16.py",
    "tests/test_analyzer/test_fx/test_bias_addition.py",
    "tests/test_analyzer/test_fx/test_mod_dir.py",
    "tests/test_analyzer/test_fx/test_nested_ckpt.py",
    "tests/test_analyzer/test_fx/test_shape_prop.py",
    "tests/test_analyzer/test_fx/test_symbolic_profile.py",
    "tests/test_analyzer/test_fx/zoo.py",
    "tests/test_analyzer/test_subclasses/test_aten.py",
    "tests/test_analyzer/test_subclasses/test_flop_tensor.py",
    "tests/test_analyzer/test_subclasses/test_meta_mode.py",
    "tests/test_auto_parallel/test_ckpt_solvers/test_C_solver_consistency.py",
    "tests/test_auto_parallel/test_ckpt_solvers/test_ckpt_torchvision.py",
    "tests/test_auto_parallel/test_ckpt_solvers/test_linearize.py",
    "tests/test_auto_parallel/test_offload/model_utils.py",
    "tests/test_auto_parallel/test_offload/test_perf.py",
    "tests/test_auto_parallel/test_offload/test_solver.py",
    "tests/test_auto_parallel/test_pass/test_node_converting_pass.py",
    "tests/test_auto_parallel/test_pass/test_size_value_converting_pass.py",
    "tests/test_auto_parallel/test_tensor_shard/test_gpt/gpt_modules.py",
    "tests/test_auto_parallel/test_tensor_shard/test_gpt/test_runtime_with_gpt_modules.py",
    "tests/test_auto_parallel/test_tensor_shard/test_gpt/test_solver_with_gpt_module.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_activation_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_binary_elementwise_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_conv_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_embedding_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_linear_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_matmul_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_norm_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_pooling_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_tensor_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/test_where_metainfo.py",
    "tests/test_auto_parallel/test_tensor_shard/test_metainfo/utils.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_addbmm_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_addmm_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_batch_norm_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_bias_linear_function_node.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_bias_linear_module_node.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_binary_elementwise_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_bmm_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_conv_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_default_reshape_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_embedding_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_getattr_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_getitem_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_layer_norm_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_linear_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_matmul_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_norm_pooling_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_output_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_permute_and_transpose_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_placeholder_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_shard_option.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_softmax_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_split_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_sum_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_tensor_constructor.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_unary_element_wise_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_view_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/test_where_handler.py",
    "tests/test_auto_parallel/test_tensor_shard/test_node_handler/utils.py",
    "tests/test_auto_parallel/test_tensor_shard/test_bias_addition_forward.py",
    "tests/test_auto_parallel/test_tensor_shard/test_broadcast.py",
    "tests/test_auto_parallel/test_tensor_shard/test_checkpoint.py",
    "tests/test_auto_parallel/test_tensor_shard/test_compatibility_with_ddp.py",
    "tests/test_auto_parallel/test_tensor_shard/test_compatibility_with_gemini.py",
    "tests/test_auto_parallel/test_tensor_shard/test_find_repeat_block.py",
    "tests/test_auto_parallel/test_tensor_shard/test_liveness_analysis.py",
    "tests/test_auto_parallel/test_tensor_shard/test_solver_with_resnet_v2.py",
    "tests/test_autochunk/test_autochunk_alphafold/benchmark_autochunk_alphafold.py",
    "tests/test_autochunk/test_autochunk_alphafold/test_autochunk_alphafold_utils.py",
    "tests/test_autochunk/test_autochunk_alphafold/test_autochunk_evoformer_block.py",
    "tests/test_autochunk/test_autochunk_alphafold/test_autochunk_evoformer_stack.py",
    "tests/test_autochunk/test_autochunk_alphafold/test_autochunk_extramsa_block.py",
    "tests/test_autochunk/test_autochunk_diffuser/benchmark_autochunk_diffuser.py",
    "tests/test_autochunk/test_autochunk_diffuser/test_autochunk_diffuser_utils.py",
    "tests/test_autochunk/test_autochunk_diffuser/test_autochunk_unet.py",
    "tests/test_autochunk/test_autochunk_transformer/benchmark_autochunk_transformer.py",
    "tests/test_autochunk/test_autochunk_transformer/test_autochunk_gpt.py",
    "tests/test_autochunk/test_autochunk_transformer/test_autochunk_transformer_utils.py",
    "tests/test_autochunk/test_autochunk_vit/test_autochunk_vit_utils.py",
    "tests/test_autochunk/test_autochunk_vit/test_autochunk_vit.py",
    "tests/test_booster/test_mixed_precision/test_fp16_torch.py",
    "tests/test_booster/test_plugin/test_gemini_plugin.py",
    "tests/test_booster/test_plugin/test_torch_ddp_plugin.py",
    "tests/test_booster/test_accelerator.py",
    "tests/test_checkpoint_io/test_general_checkpoint_io.py",
    "tests/test_cluster/test_device_mesh_manager.py",
    "tests/test_comm/test_boardcast_send_recv_v2.py",
    "tests/test_comm/test_comm.py",
    "tests/test_comm/test_object_list_p2p_v2.py",
    "tests/test_comm/test_object_list_p2p.py",
    "tests/test_config/sample_config.py",
    "tests/test_config/test_load_config.py",
    "tests/test_context/configs/parallel_2d_init.py",
    "tests/test_context/configs/parallel_2p5d_init.py",
    "tests/test_context/configs/parallel_3d_init.py",
    "tests/test_context/test_hybrid_parallel.py",
    "tests/test_data/test_cifar10_dataset.py",
    "tests/test_data/test_data_parallel_sampler.py",
    "tests/test_data/test_deterministic_dataloader.py",
    "tests/test_data_pipeline_tensor_parallel/test_cifar_with_data_pipeline_tensor_v2.py",
    "tests/test_data_pipeline_tensor_parallel/test_cifar_with_data_pipeline_tensor.py",
    "tests/test_ddp/test_ddp_ignore_params.py",
    "tests/test_ddp/test_ddp_state_dict.py",
    "tests/test_ddp/test_reducer.py",
    "tests/test_device/test_alpha_beta.py",
    "tests/test_device/test_device_mesh.py",
    "tests/test_device/test_extract_alpha_beta.py",
    "tests/test_device/test_init_logical_pg.py",
    "tests/test_device/test_search_logical_device_mesh.py",
    "tests/test_engine/test_engine.py",
    "tests/test_engine/test_gradient_accumluation.py",
    "tests/test_fx/test_codegen/test_activation_checkpoint_codegen.py",
    "tests/test_fx/test_codegen/test_nested_activation_checkpoint_codegen.py",
    "tests/test_fx/test_codegen/test_offload_codegen.py",
    "tests/test_fx/test_meta/test_aten.py",
    "tests/test_fx/test_meta/test_backward.py",
    "tests/test_fx/test_meta/test_meta_trace.py",
    "tests/test_fx/test_pipeline/test_hf_model/hf_utils.py",
    "tests/test_fx/test_pipeline/test_hf_model/test_albert.py",
    "tests/test_fx/test_pipeline/test_hf_model/test_bert.py",
    "tests/test_fx/test_pipeline/test_hf_model/test_gpt.py",
    "tests/test_fx/test_pipeline/test_hf_model/test_opt.py",
    "tests/test_fx/test_pipeline/test_hf_model/test_t5.py",
    "tests/test_fx/test_pipeline/test_timm_model/test_timm.py",
    "tests/test_fx/test_pipeline/test_timm_model/timm_utils.py",
    "tests/test_fx/test_pipeline/test_topo/test_topo.py",
    "tests/test_fx/test_pipeline/test_topo/topo_utils.py",
    "tests/test_fx/test_pipeline/test_torchvision/test_torchvision.py",
    "tests/test_fx/test_profiler/gpt_utils.py",
    "tests/test_fx/test_profiler/test_profiler_meta_info_prop.py",
    "tests/test_fx/test_tracer/test_hf_model/hf_tracer_utils.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_albert.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_bert.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_diffuser.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_gpt.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_opt.py",
    "tests/test_fx/test_tracer/test_hf_model/test_hf_t5.py",
    "tests/test_fx/test_tracer/test_timm_model/test_timm_model.py",
    "tests/test_fx/test_tracer/test_torchaudio_model/test_torchaudio_model.py",
    "tests/test_fx/test_tracer/test_torchaudio_model/torchaudio_utils.py",
    "tests/test_fx/test_tracer/test_torchrec_model/test_deepfm_model.py",
    "tests/test_fx/test_tracer/test_torchrec_model/test_dlrm_model.py",
    "tests/test_fx/test_tracer/test_torchvision_model/test_torchvision_model.py",
    "tests/test_fx/test_tracer/test_activation_checkpoint_annotation.py",
    "tests/test_fx/test_tracer/test_bias_addition_module.py",
    "tests/test_fx/test_tracer/test_control_flow.py",
    "tests/test_fx/test_tracer/test_functional_conv.py",
    "tests/test_fx/test_tracer/test_patched_module.py",
    "tests/test_fx/test_tracer/test_patched_op.py",
    "tests/test_fx/test_coloproxy.py",
    "tests/test_fx/test_comm_size_compute.py",
    "tests/test_fx/test_graph_manipulation.py",
    "tests/test_fx/test_meta_info_prop.py",
    "tests/test_fx/test_parallel_1d.py",
    "tests/test_fx/test_pipeline_passes.py",
    "tests/test_layers/test_1d/checks_1d/check_layer_1d.py",
    "tests/test_layers/test_1d/checks_1d/common.py",
    "tests/test_layers/test_1d/test_1d.py",
    "tests/test_layers/test_2d/checks_2d/check_layer_2d.py",
    "tests/test_layers/test_2d/checks_2d/check_operation_2d.py",
    "tests/test_layers/test_2d/checks_2d/common.py",
    "tests/test_layers/test_2d/test_2d.py",
    "tests/test_layers/test_2p5d/checks_2p5d/check_layer_2p5d.py",
    "tests/test_layers/test_2p5d/checks_2p5d/check_operation_2p5d.py",
    "tests/test_layers/test_2p5d/checks_2p5d/common.py",
    "tests/test_layers/test_2p5d/test_2p5d.py",
    "tests/test_layers/test_3d/checks_3d/check_layer_3d.py",
    "tests/test_layers/test_3d/checks_3d/common.py",
    "tests/test_layers/test_3d/test_3d.py",
    "tests/test_layers/test_sequence/checks_seq/check_layer_seq.py",
    "tests/test_layers/test_sequence/test_sequence.py",
    "tests/test_layers/test_cache_embedding.py",
    "tests/test_moe/test_grad_handler.py",
    "tests/test_moe/test_kernel.py",
    "tests/test_moe/test_moe_checkpoint.py",
    "tests/test_moe/test_moe_colo_init.py",
    "tests/test_moe/test_moe_group.py",
    "tests/test_moe/test_moe_zero_init.py",
    "tests/test_moe/test_moe_zero_model.py",
    "tests/test_moe/test_moe_zero_optim.py",
    "tests/test_ops/test_addmm_tp.py",
    "tests/test_ops/test_embedding_bag_tp.py",
    "tests/test_ops/test_embedding_tp.py",
    "tests/test_ops/test_linear_tp.py",
    "tests/test_ops/test_loss_func.py",
    "tests/test_ops/test_op.py",
    "tests/test_ops/test_view.py",
    "tests/test_optimizer/test_cpu_adam.py",
    "tests/test_optimizer/test_fused_adam_kernel.py",
    "tests/test_optimizer/test_fused_adam.py",
    "tests/test_optimizer/test_hybrid_adam.py",
    "tests/test_optimizer/test_nvme.py",
    "tests/test_pipeline/rpc_test_utils.py",
    "tests/test_pipeline/test_cuda_rpc_chimera.py",
    "tests/test_pipeline/test_cuda_rpc_optimizer.py",
    "tests/test_pipeline/test_cuda_rpc_performance.py",
    "tests/test_pipeline/test_cuda_rpc_pipeline.py",
    "tests/test_pipeline/test_cuda_rpc_value_correctness.py",
    "tests/test_pipeline/test_middleware_1f1b.py",
    "tests/test_pipeline/test_pipelinable.py",
    "tests/test_pipeline/test_pipeline_process_group.py",
    "tests/test_tensor/common_utils/__init__.py",
    "tests/test_tensor/common_utils/_utils.py",
    "tests/test_tensor/core/test_dist_spec_mgr.py",
    "tests/test_tensor/core/test_tensor.py",
    "tests/test_tensor/model/test_gpt2.py",
    "tests/test_tensor/model/test_model.py",
    "tests/test_tensor/model/test_module_spec.py",
    "tests/test_tensor/test_dtensor/test_comm_spec.py",
    "tests/test_tensor/test_dtensor/test_dtensor_sharding_spec.py",
    "tests/test_tensor/test_dtensor/test_dtensor.py",
    "tests/test_tensor/test_dtensor/test_layout_converter.py",
    "tests/test_tensor/test_colo_checkpoint_tools.py",
    "tests/test_tensor/test_comm_spec_apply.py",
    "tests/test_tensor/test_context.py",
    "tests/test_tensor/test_mix_gather.py",
    "tests/test_tensor/test_parameter.py",
    "tests/test_tensor/test_shape_consistency_apply.py",
    "tests/test_tensor/test_shape_consistency.py",
    "tests/test_tensor/test_sharded_linear.py",
    "tests/test_tensor/test_sharding_spec.py",
    "tests/test_tensor/test_tp_with_zero.py",
    "tests/test_trainer/test_pipeline/test_p2p.py",
    "tests/test_trainer/test_pipeline/test_pipeline_schedule.py",
    "tests/test_trainer/test_trainer_with_non_pipe_schedule.py",
    "tests/test_trainer/test_trainer_with_pipe_schedule.py",
    "tests/test_utils/test_checkpoint/test_checkpoint_1d.py",
    "tests/test_utils/test_checkpoint/test_checkpoint_2d.py",
    "tests/test_utils/test_checkpoint/test_checkpoint_2p5d.py",
    "tests/test_utils/test_checkpoint/test_checkpoint_3d.py",
    "tests/test_utils/test_checkpoint_io/test_build_checkpoints.py",
    "tests/test_utils/test_checkpoint_io/test_load.py",
    "tests/test_utils/test_checkpoint_io/test_merge_param.py",
    "tests/test_utils/test_checkpoint_io/test_merge.py",
    "tests/test_utils/test_checkpoint_io/test_redist.py",
    "tests/test_utils/test_checkpoint_io/test_save.py",
    "tests/test_utils/test_checkpoint_io/test_unmerge_param.py",
    "tests/test_utils/test_lazy_init/test_distribute.py",
    "tests/test_utils/test_lazy_init/test_models.py",
    "tests/test_utils/test_lazy_init/utils.py",
    "tests/test_utils/test_activation_checkpointing.py",
    "tests/test_utils/test_colo_checkpoint.py",
    "tests/test_utils/test_commons.py",
    "tests/test_utils/test_flash_attention.py",
    "tests/test_utils/test_lazy_init_ctx.py",
    "tests/test_utils/test_memory.py",
    "tests/test_utils/test_norm_gradient_clipping.py",
    "tests/test_utils/test_zero_gradient_clippling.py",
    "tests/test_zero/test_gemini/test_chunk_mgrv2.py",
    "tests/test_zero/test_gemini/test_chunkv2.py",
    "tests/test_zero/test_gemini/test_fwd_bwd.py",
    "tests/test_zero/test_gemini/test_gemini_use_rmt.py",
    "tests/test_zero/test_gemini/test_get_torch_model.py",
    "tests/test_zero/test_gemini/test_grad_clip.py",
    "tests/test_zero/test_gemini/test_inference.py",
    "tests/test_zero/test_gemini/test_optim.py",
    "tests/test_zero/test_gemini/test_runtime_mem_tracer.py",
    "tests/test_zero/test_gemini/test_search.py",
    "tests/test_zero/test_gemini/test_zeroddp_state_dict_shard.py",
    "tests/test_zero/test_gemini/test_zeroddp_state_dict.py",
    "tests/test_zero/test_gemini/test_zerooptim_state_dict.py",
    "tests/test_zero/test_legacy/common.py",
    "tests/test_zero/test_legacy/test_found_inf.py",
    "tests/test_zero/test_legacy/test_gemini_manager.py",
    "tests/test_zero/test_legacy/test_init_context.py",
    "tests/test_zero/test_legacy/test_param_op.py",
    "tests/test_zero/test_legacy/test_shard_model_v2.py",
    "tests/test_zero/test_legacy/test_shard_param.py",
    "tests/test_zero/test_legacy/test_sharded_optim_state_dict.py",
    "tests/test_zero/test_legacy/test_sharded_optim_v2.py",
    "tests/test_zero/test_legacy/test_sharded_optim_with_sync_bn.py",
    "tests/test_zero/test_legacy/test_state_dict.py",
    "tests/test_zero/test_legacy/test_tensor_utils.py",
    "tests/test_zero/test_legacy/test_zero_engine.py",
    "tests/test_zero/test_low_level/test_grad_acc.py",
    "tests/test_zero/test_low_level/test_zero_init.py",
    "tests/test_zero/test_low_level/test_zero_tp.py",
    "tests/test_zero/test_low_level/test_zero1_2.py",
    ".clang-format",
    ".compatibility",
    ".cuda_ext.json",
    ".flake8",
    ".gitignore",
    ".gitmodules",
    ".isort.cfg",
    ".pre-commit-config.yaml",
    ".style.yapf",
    "LICENSE",
    "MANIFEST.in",
    "pytest.ini",
    "setup.py",
    "version.txt"
  ]
}